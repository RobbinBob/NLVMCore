
package scripts;

import com.nolimitscoaster.*;
import nlvm.math3d.*;

public class TrackTo extends Object implements FrameListener
{
    private static Simulator m_Simulator = null;

    private SceneObject m_TrackSceneObject = null;
    private SceneObjectElement m_TrackSceneObjectElement = null;
    private Matrix4x4f m_TrackMatrix4x4f = null;

    private SceneObject m_SetSceneObject = null;
    private SceneObjectElement m_SetSceneObjectElement = null;
    private Matrix4x4f m_SetMatrix4x4f = null;

    private static final int MODE_SCENEOBJECT = 0;
    private static final int MODE_SCENEOBJECTELEMENT = 1;
    private static final int MODE_MATRIX4X4F = 2;
    private int m_TrackMode = -1;
    private int m_SetMode = -1;


    private bool m_IsEnabled = true;



    public TrackTo(Object trackObject, Object setObject)
    {
        bool trackCastSuccess = false;
        if(trackObject instanceof com.nolimitscoaster.SceneObject)
        {
            m_TrackMode = MODE_SCENEOBJECT;
            m_TrackSceneObject = (SceneObject)trackObject;
            trackCastSuccess = true;
        }
        if(trackObject instanceof com.nolimitscoaster.SceneObjectElement)
        {
            m_TrackMode = MODE_SCENEOBJECTELEMENT;
            m_TrackSceneObjectElement = (SceneObjectElement)trackObject;
            trackCastSuccess = true;
        }
        if(trackObject instanceof nlvm.math3d.Matrix4x4f)
        {
            m_TrackMode = MODE_MATRIX4X4F;
            m_TrackMatrix4x4f = (Matrix4x4f)trackObject;
            trackCastSuccess = true;
        }
        if(!trackCastSuccess) System.throwRuntimeException("Failed to find cast option for parameter 'trackObject'");


        bool setCastSuccess = false;
        if(setObject instanceof com.nolimitscoaster.SceneObject)
        {
            m_SetMode = MODE_SCENEOBJECT;
            m_SetSceneObject = (SceneObject)setObject;
            setCastSuccess = true;
        }
        if(setObject instanceof com.nolimitscoaster.SceneObjectElement)
        {
            m_SetMode = MODE_SCENEOBJECTELEMENT;
            m_SetSceneObjectElement = (SceneObjectElement)setObject;
            setCastSuccess = true;
        }
        if(setObject instanceof nlvm.math3d.Matrix4x4f)
        {
            m_SetMode = MODE_MATRIX4X4F;
            m_SetMatrix4x4f = (Matrix4x4f)setObject;
            setCastSuccess = true;
        }
        if(!setCastSuccess) System.throwRuntimeException("Failed to find cast option for parameter 'setObject'");

        if(m_Simulator == null) m_Simulator = NoLimits.getSimulator();

        SetEnabled(true);
    }

    public void onNextFrame()
    {
        Matrix4x4f trackingRef = GetTrackingMatrix();
        SetTrackingMatrix(trackingRef);
    }


    private Matrix4x4f GetTrackingMatrix()
    {
        switch(m_TrackMode)
        {
            case MODE_SCENEOBJECT: return m_TrackSceneObject.getMatrix();
            case MODE_SCENEOBJECTELEMENT: return m_TrackSceneObjectElement.getAbsoluteMatrix();
            case MODE_MATRIX4X4F: return m_TrackMatrix4x4f;
        }

        return null;
    }
    private void SetTrackingMatrix(Matrix4x4f matrix)
    {
        switch(m_SetMode)
        {
            case MODE_SCENEOBJECT: 
                m_SetSceneObject.setMatrix(matrix);
                break;
            case MODE_SCENEOBJECTELEMENT: 
                m_SetSceneObjectElement.setMatrix(matrix);
                break;
            case MODE_MATRIX4X4F:
                float[] trackElements = matrix.elems();
                float[] setElements = m_SetMatrix4x4f.elems();

                for(int i = 0; i < trackElements.length; i++)
                {
                    setElements[i] = trackElements[i];
                }
                break;
        }
    }


    public void SetEnabled(bool state)
    {
        m_IsEnabled = state;
        if(state)
        {
            m_Simulator.addFrameListener(this);
        }else
        {
            m_Simulator.removeFrameListener(this);
        }
    }
    public bool GetEnabled()
    {
        return m_IsEnabled;
    }


    public void SetTrackingObject(Object trackObject)
    {
        bool trackCastSuccess = false;
        if(trackObject instanceof com.nolimitscoaster.SceneObject)
        {
            m_TrackMode = MODE_SCENEOBJECT;
            m_TrackSceneObject = (SceneObject)trackObject;
            trackCastSuccess = true;
        }
        if(trackObject instanceof com.nolimitscoaster.SceneObjectElement)
        {
            m_TrackMode = MODE_SCENEOBJECTELEMENT;
            m_TrackSceneObjectElement = (SceneObjectElement)trackObject;
            trackCastSuccess = true;
        }
        if(trackObject instanceof nlvm.math3d.Matrix4x4f)
        {
            m_TrackMode = MODE_MATRIX4X4F;
            m_TrackMatrix4x4f = (Matrix4x4f)trackObject;
            trackCastSuccess = true;
        }
        if(!trackCastSuccess) System.throwRuntimeException("Failed to find cast option for parameter 'trackObject'");
    }
    public void SetFollowingObject(Object followObject)
    {
        bool setCastSuccess = false;
        if(followObject instanceof com.nolimitscoaster.SceneObject)
        {
            m_SetMode = MODE_SCENEOBJECT;
            m_SetSceneObject = (SceneObject)followObject;
            setCastSuccess = true;
        }
        if(followObject instanceof com.nolimitscoaster.SceneObjectElement)
        {
            m_SetMode = MODE_SCENEOBJECTELEMENT;
            m_SetSceneObjectElement = (SceneObjectElement)followObject;
            setCastSuccess = true;
        }
        if(followObject instanceof nlvm.math3d.Matrix4x4f)
        {
            m_SetMode = MODE_MATRIX4X4F;
            m_SetMatrix4x4f = (Matrix4x4f)followObject;
            setCastSuccess = true;
        }
        if(!setCastSuccess) System.throwRuntimeException("Failed to find cast option for parameter 'setObject'");
    }
}