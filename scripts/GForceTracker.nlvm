package scripts;

import nlvm.math3d.*;
import scripts.math.*;
import scripts.containers.*;

/// <class>
/// <desc>Base type to implement G-Force tracking capabilities.</desc>
public class GForceTracker extends UpdateableObject
{
    private Matrix4x4 m_TrackingMatrix = null;
    private Vector3 m_OldPosition = new Vector3();
    private Vector3 m_NewVelocity = new Vector3();
    private Vector3 m_OldVelocity = new Vector3();

    private Vector3 m_GForces = new Vector3();
    private Vector3 m_AverageGForce = new Vector3();

    private static final int MAX_AVERAGE = 25;
    private List m_AverageForces = new List(MAX_AVERAGE);

    private static final Vector3 GRAVITY = new Vector3(0, 9.81f, 0);

    /// <constructor>
    /// <desc>Create a new G-Force tracker, tracking a matrix.</desc>
    /// </constructor>
    public GForceTracker()
    {
        SetShouldUpdate(true);
    }

    public void SetMatrix(Matrix4x4 matrix)
    {
        m_TrackingMatrix = matrix;
    }

    public void Update(float tick)
    {
        Vector3 position = m_TrackingMatrix.GetPosition(); // New position

            // Velocity
        m_NewVelocity = position.Sub(m_OldPosition).Div(tick);

            // Acceleration
        Vector3 accel = m_NewVelocity.Sub(m_OldVelocity).Div(tick);
        accel = accel.Add(GRAVITY); // Add gravity

            // G-force
        m_GForces = accel.Div(9.81f);

            // Averages the forces to reduce jitters
        m_AverageForces.Insert(m_GForces);
        while(m_AverageForces.Count() < MAX_AVERAGE)
            m_AverageForces.Insert(m_GForces);
        while(m_AverageForces.Count() > MAX_AVERAGE)
            m_AverageForces.PopFront();

        m_AverageGForce = Vector3.Zero;
        IEnumerator forceEnumerator = m_AverageForces.GetEnumerator();
        while(forceEnumerator.MoveNext())
            m_AverageGForce = m_AverageGForce.Add((Vector3)forceEnumerator.Get());
        m_AverageGForce = m_AverageGForce.Div(m_AverageForces.Count());

            // Store old positions
        m_OldPosition = position;
        m_OldVelocity = m_NewVelocity;
    }
    public void LateUpdate(float tick) { }

    /// <method>
    /// <desc>Gets the current G-Force read-out.</desc>
    /// <return>The vector to set read-out data to.</return>
    /// </method>
    public Vector3 GetForce()
    {
        return m_GForces.Copy();
    }
    /// <method>
    /// <desc>Gets the current G-Force read-out, averaged over multiple frames.</desc>
    /// <return>The vector to set read-out data to.</return>
    /// </method>
    public Vector3 GetAverageForce()
    {
        return m_AverageGForce.Copy();
    }
}
/// </class>