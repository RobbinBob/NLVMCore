package scripts;

import com.nolimitscoaster.*;
import scripts.containers.*;
import scripts.utilities.StringUtil;

public final class AudioToggleShutOff extends Behaviour implements InteractionActionListener
{
    private AudioController[] m_AudioControllers = null;
    private InteractionObject m_Interaction = null;
    private Animation m_Animation = null;
    private bool m_IsToggled = false;
    private bool m_Debounce = false;

    public int GetOrder() { return -15; }
    public bool Awake() 
    {
        String groupId = GetStringParameter("audio_group");
        if(groupId.length() == 0)
        {
            Debug.Warn("Button - Master Switch | No Group Id specified");
            return false;
        }
        return true;
    }

    public void Start()
    {
        String controllerParams = GetStringParameter("audio_group");
        String[] params = StringUtil.SplitString(controllerParams, ',');
        if(params.length == 0)
        {
            Debug.Warn("Cue Trigger | Internal error when parsing Group Id/s, '" + controllerParams + "' is not a valid parameter entry");
            return;
        }
        List tempControllers = new List(params.length);
        for(int i = 0; i < params.length; ++i)
        {
            IReferenceable reference = Registry.GetInstance().GetReferenceFromName("scripts.AudioController", params[i]);
            if(reference == null)
            {
                Debug.Warn("Cue Trigger | Unable to find Audio Group with id '" + params[i] + "'");
                continue;
            }
            tempControllers.Insert(reference);
        }
        m_AudioControllers = new AudioController[tempControllers.Count()];
        IEnumerator enumerator = tempControllers.GetEnumerator();
        int l = 0;
        while(enumerator.MoveNext())
            m_AudioControllers[l++] = (AudioController)enumerator.Get();

        m_Interaction = InteractionObject.createSimpleButton();
        m_Interaction.setActive(true);
        m_Interaction.setEnabled(true);
        m_Interaction.setPosition(m_SceneObject.getTranslation());
        m_Interaction.setRadius(0.05f);
        m_Interaction.addActionListener(this);
        m_Animation = new Animation(m_SceneObject);

        m_IsToggled = true;
        m_Animation.Play(0, 10);
        m_SceneObject.getElementAt(1).setTextureAnimationIndex(1);
        m_SceneObject.getElementForName("Plaque").setVisible(!GetBoolParameter("hide_plaque"));
    }

    public void Update(float deltaTime)
    {
        if(m_Debounce && !m_Animation.IsPlaying())
        {
            m_Debounce = false;
            m_Interaction.setEnabled(true);
            if(!m_IsToggled)
                m_SceneObject.getElementAt(1).setTextureAnimationIndex(0);
        }
    }

    public void onInteractionAction(InteractionObject object)
    {
        if(m_Debounce)
            return;
        m_Debounce = true;
        m_Interaction.setEnabled(false);

        if(m_IsToggled)
        {
            m_Animation.Play(10, 20);
        }
        else
        {
            m_Animation.Play(0, 10);
            m_SceneObject.getElementAt(1).setTextureAnimationIndex(1);
        }
        m_IsToggled = !m_IsToggled;
        for(int i = 0; i < m_AudioControllers.length; ++i)
            m_AudioControllers[i].SetControllerOn(m_IsToggled);
    }
}