package scripts;

import com.nolimitscoaster.*;

/// <class>
/// <desc>Base class to derrive any SceneObject attached scripts.</desc>
public abstract class Behaviour extends Script
{
    /// <member>
    /// <desc>Reference to the SceneObject this Behaviour is attached to.</desc>
    /// </member>
    protected SceneObject m_SceneObject = null;
    /// <member>
    /// <desc>The name of the SceneObject.</desc>
    /// </member>
    protected String m_Name = "";

    private float m_PreviousTick = 0.0f;

    public final bool onInit()
    {
            // The whole reason this exists is because im too lazy to write this
        m_SceneObject = sim.getSceneObjectForEntityId(getParentEntityId());
        if(m_SceneObject == null)
            NullReferenceException.Throw("Unable to find SceneObject, is this Behaviour attached to one?");

        m_Name = m_SceneObject.getName();
        return Start();
    }
    public final void onNextFrame(float tick)
    {
        m_PreviousTick = tick;
        Update(tick);
    }
    public final void onLateUpdate()
    {
        LateUpdate(m_PreviousTick);
    }
    public final void onExit()
    {
        Destroy();
    }

    /// <method>
    /// <desc>Called once to initialize the object.</desc>
    /// <return>Pass True to allow it to continue excecution, otherwise False to cancel.</return>
    /// </method>
    public abstract bool Start();
    /// <method>
    /// <desc>Called each frame the Behaviour is active.</desc>
    /// <arg name="tick">The time-step the previous frame took to execute.</arg>
    /// </method>
    public void Update(float tick) 
    {
    }
    /// <method>
    /// <desc>Called each frame after Update is called.</desc>
    /// <arg name="tick">The time-step the previous frame took to execute.</arg>
    /// </method>
    public void LateUpdate(float tick)
    {
    }
    /// <method>
    /// <desc>Called before this Behaviour is destroyed.</desc>
    /// </method>
    public void Destroy()
    {
    }

    /// <method>
    /// <desc>A String representation of this Behaviour.</desc>
    /// </method>
    public String toString()
    {
        return "Behaviour" + getEntityId();
    }

    /// <method>
    /// <desc>Attempts to retrieve a float parameter, throws an exception if no parameter is found with the given id.</desc>
    /// <arg name="name">Parameter id.</arg>
    /// </method>
    protected final float GetFloatParameter(String name)
    {
        Double val = m_SceneObject.getDoubleParameter(name);
        if(val == null)
            NullReferenceException.Throw("Could not find parameter of type 'Double' with name '" + name + "' on SceneObject");
        return val.floatValue();
    }
    /// <method>
    /// <desc>Attempts to retrieve a double parameter, throws an exception if no parameter is found with the given id.</desc>
    /// <arg name="name">Parameter id.</arg>
    /// </method>
    protected final double GetDoubleParameter(String name)
    {
        Double val = m_SceneObject.getDoubleParameter(name);
        if(val == null)
            NullReferenceException.Throw("Could not find parameter of type 'Double' with name '" + name + "' on SceneObject");
        return val.doubleValue();
    }
    /// <method>
    /// <desc>Attempts to retrieve a int parameter, throws an exception if no parameter is found with the given id.</desc>
    /// <arg name="name">Parameter id.</arg>
    /// </method>
    protected final int GetIntegerParameter(String name)
    {
        Integer val = m_SceneObject.getIntegerParameter(name);
        if (val == null)
            NullReferenceException.Throw("Could not find parameter of type 'Integer' with name '" + name + "' on SceneObject");
        return val.intValue();
    }
    /// <method>
    /// <desc>Attempts to retrieve a String parameter, throws an exception if no parameter is found with the given id.</desc>
    /// <arg name="name">Parameter id.</arg>
    /// </method>
    protected final String GetStringParameter(String name)
    {
        String val = m_SceneObject.getStringParameter(name);
        if(val == null)
            NullReferenceException.Throw("Could not find parameter of type 'String' with name '" + name + "' on SceneObject");
        return val;
    }
    /// <method>
    /// <desc>Attempts to retrieve a bool parameter, throws an exception if no parameter is found with the given id.</desc>
    /// <arg name="name">Parameter id.</arg>
    /// </method>
    protected final bool GetBoolParameter(String name)
    {
        Boolean val = m_SceneObject.getBooleanParameter(name);
        if(val == null)
            NullReferenceException.Throw("Could not find parameter of type 'Boolean' with name '" + name + "' on SceneObject");
        return val.boolValue();
    }
    /// <method>
    /// <desc>Attempts to retrieve a Coaster parameter, throws an exception if no parameter is found with the given id.</desc>
    /// <arg name="name">Parameter id.</arg>
    /// </method>
    protected final Coaster GetCoasterParameter(String name)
    {
        Coaster val = m_SceneObject.getCoasterParameter(name);
        if(val == null)
            NullReferenceException.Throw("Could not find parameter of type 'Coaster' with name '" + name + "' on SceneObject");
        return val;
    }
    /// <method>
    /// <desc>Attempts to retrieve a TrackTrigger parameter, throws an exception if no parameter is found with the given id.</desc>
    /// <arg name="name">Parameter id.</arg>
    /// </method>
    protected final TrackTrigger GetTriggerParameter(String name)
    {
        TrackTrigger val = m_SceneObject.getTrackTriggerParameter(name);
        if(val == null)
            NullReferenceException.Throw("Could not find parameter of type 'TrackTrigger' with name '" + name + "' on SceneObject");
        return val;
    }
    /// <method>
    /// <desc>Attempts to retrieve a Block parameter, throws an exception if no parameter is found with the given id.</desc>
    /// <arg name="name">Parameter id.</arg>
    /// </method>
    protected final Block GetBlockParameter(String name)
    {
        Block val = m_SceneObject.getBlockParameter(name);
        if(val == null)
            NullReferenceException.Throw("Could not find parameter of type 'BlockSection' with name '" + name + "' on SceneObject");
        return val;
    }
    /// <method>
    /// <desc>Attempts to retrieve a Section parameter, throws an exception if no parameter is found with the given id.</desc>
    /// <arg name="name">Parameter id.</arg>
    /// </method>
    protected final Section GetSectionParameter(String name)
    {
        Block val = m_SceneObject.getBlockParameter(name);
        if(val == null)
            NullReferenceException.Throw("Could not find parameter of type 'BlockSection' with name '" + name + "' on SceneObject");   
        return val.getSection();
    }
    /// <method>
    /// <desc>Attempts to retrieve a SpecialTrack parameter, throws an exception if no parameter is found with the given id.</desc>
    /// <arg name="name">Parameter id.</arg>
    /// </method>
    protected final SpecialTrack GetSpecialTrackParameter(String name)
    {
        SpecialTrack val = m_SceneObject.getSpecialTrackParameter(name);
        if(val == null)
            NullReferenceException.Throw("COuld not find parameter of type 'SpecialTrack' with name '" + name + "' on SceneObject");   
        return val;
    }
    /// <method>
    /// <desc>Attempts to retrieve a ResourcePath parameter, throws an exception if no parameter is found with the given id.</desc>
    /// <arg name="name">Parameter id.</arg>
    /// </method>
    protected final ResourcePath GetResourcePathParameter(String name)
    {
        ResourcePath val = m_SceneObject.getResourcePathParameter(name);
        if(val == null) 
            NullReferenceException.Throw("Could not find parameter of type 'TextFile | AudioFile | VideoFile | File' with name '" + name + "' on SceneObject");
        return val;
    }

    /// <method>
    /// <desc>Attempts to fetch a SceneObject with a given name.</desc>
    /// <arg name="name">The id of the SceneObject to fetch.</arg>
    /// <arg name="throwIfNotFound">If true, will raise an error if unable to find a SceneObject.</arg>
    /// </method>
    public final SceneObject GetSceneObject(String name, bool throwIfNotFound)
    {
        SceneObject go = sim.getSceneObject(name);
        if(go == null && throwIfNotFound)
            NullReferenceException.Throw("Behaviour: Could not find SceneObject with name '" + name + "'");
        return go;
    }
}
/// </class>