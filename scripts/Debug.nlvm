package scripts;

import com.nolimitscoaster.*;
import scripts.utilities.*;
import nlvm.math3d.*;
import scripts.math.*;

/// <class>
/// <desc>Allows debugging of scripts.</desc>
public final class Debug extends Object
{
    private static Simulator m_Simulator = null;
    private static Simulator GetSimulator()
    {
        if(m_Simulator == null)
            m_Simulator = NoLimits.getSimulator();
        return m_Simulator;
    }

    private static DebugGizmoHandler m_GizmoHandler = new DebugGizmoHandler();


    /// <method>
    /// <desc>Draw a Matrix.</desc>
    /// <arg name="matrix">The matrix to be drawn.</arg>
    /// <arg name="timespan">The time(seconds) the matrix will exist for.</arg>
    /// </method>
    public static void DrawMatrix(Matrix4x4 matrix, float timespan)
    {
        DrawMatrix(matrix, timespan, 1.0f);
    }
    /// <method>
    /// <desc>Draw a Matrix.</desc>
    /// <arg name="matrix">The matrix to be drawn.</arg>
    /// <arg name="timespan">The time(seconds) the matrix will exist for.</arg>
    /// </method>
    public static void DrawMatrix(Matrix4x4 matrix, float timespan, float size)
    {
        Vector3f pos = matrix.GetPosition();
        float scale = Mathf.Abs(size);

        Vector3f mathV = pos.dup();
        Vector3f axisV = matrix.GetRight();
        axisV.mul(scale);
        mathV.add(axisV);
        DrawLine(pos, mathV.dup(), timespan, new Vector4f(1, 0, 0, 0));

        mathV.set(pos);
        matrix.GetUp(axisV);
        axisV.mul(scale);
        mathV.add(axisV);
        DrawLine(pos, mathV.dup(), timespan, new Vector4f(0, 1, 0, 0));

        mathV.set(pos);
        matrix.GetForward(axisV);
        axisV.mul(scale);
        mathV.add(axisV);
        DrawLine(pos, mathV.dup(), timespan, new Vector4f(0, 0, 1, 0));

        DrawSphere(pos, timespan, new Vector4f(0.7f, 0.7f, 0.7f, 0.0f));
    }

    /// <method>
    /// <desc>Draw a sphere at a point in space.</desc>
    /// <arg name="position">The world-space position to place the sphere.</arg>
    /// <arg name="timespan">The time(seconds) this sphere will exist for.</arg>
    /// </method>
    public static void DrawSphere(Vector3f position, float timespan)
    {
        DrawSphere(position, timespan, new Vector4f(1, 1, 1, 0), 0.1f);
    }
    /// <method>
    /// <desc>Draw a sphere at a point in space.</desc>
    /// <arg name="position">The world-space position to place the sphere.</arg>
    /// <arg name="timespan">The time(seconds) this sphere will exist for.</arg>
    /// <arg name="color">The color of the sphere being drawn.</arg>
    /// </method>
    public static void DrawSphere(Vector3f position, float timespan, Vector4f color)
    {
        DrawSphere(position, timespan, color, 0.1f);
    }
    /// <method>
    /// <desc>Draw a sphere at a point in space.</desc>
    /// <arg name="position">The world-space position to place the sphere.</arg>
    /// <arg name="timespan">The time(seconds) this sphere will exist for.</arg>
    /// <arg name="color">The color of the sphere being drawn.</arg>
    /// <arg name="diameter">The diameter(meters) of the sphere.</arg>
    /// </method>
    public static void DrawSphere(Vector3f position, float timespan, Vector4f color, float diameter)
    {
        Matrix4x4f matrix = new Matrix4x4f();
        matrix.initTrans(position);

        Matrix4x4f scale = new Matrix4x4f();
        scale.initScal(diameter, diameter, diameter);
        matrix.multRight(scale);

        m_GizmoHandler.DrawSphere(matrix, timespan, color);
    }


    /// <method>
    /// <desc>Draw a line between two points.</desc>
    /// <arg name="from">Point in world-space.</arg>
    /// <arg name="to">Point in world-space.</arg>
    /// <arg name="timespan">The time(seconds) this line will exist for.</arg>
    /// </method>
    public static void DrawLine(Vector3f from, Vector3f to, float timespan)
    {
        DrawLine(from, to, timespan, new Vector4f(1, 1, 1, 0), 0.05f);
    }
    /// <method>
    /// <desc>Draw a line between two points.</desc>
    /// <arg name="from">Point in world-space.</arg>
    /// <arg name="to">Point in world-space.</arg>
    /// <arg name="timespan">The time(seconds) this line will exist for.</arg>
    /// <arg name="color">The color of the line being drawn.</arg>
    /// </method>
    public static void DrawLine(Vector3f from, Vector3f to, float timespan, Vector4f color)
    {
        DrawLine(from, to, timespan, color, 0.05f);
    }
    /// <method>
    /// <desc>Draw a line between two points.</desc>
    /// <arg name="from">Point in world-space.</arg>
    /// <arg name="to">Point in world-space.</arg>
    /// <arg name="timespan">The time(seconds) this line will exist for.</arg>
    /// <arg name="color">The color of the line being drawn.</arg>
    /// <arg name="diameter">The thickness(meters) of the line.</arg>
    /// </method>
    public static void DrawLine(Vector3f from, Vector3f to, float timespan, Vector4f color, float diameter)
    {
        Vector3f vec = new Vector3f(0, 1, 0);
        vec.cross(from, to);
        //vec.cross(vec, new Vector3f(1, 0, 0));

        Matrix4x4f matrix = MatrixUtil.LookTo(from, to, vec);

        Matrix4x4f scale = new Matrix4x4f();
        scale.initXRot(Mathf.DegToRad * -90.0f);
        matrix.multRight(scale);

        scale.initScal(diameter, from.distance(to), diameter);
        matrix.multRight(scale);

        m_GizmoHandler.DrawLine(matrix, timespan, color);
    }



    private static String GetTimeDataSequence()
    {
        return "Elapsed Time: " + String.valueOf((float)GetSimulator().getCurAbsSimulationTimeSec()) + " | ";
    }
    /// <method>
    /// <desc>Creates a time stamped output to the console.</desc>
    /// </method>
    public static final void Print(String obj)
    {
        System.out.println(GetTimeDataSequence() + obj);
    }
    /// <method>
    /// <desc>Creates a time stamped output to the console.</desc>
    /// </method>
    public static final void Print(float obj)
    {
        System.out.println(GetTimeDataSequence() + String.valueOf(obj));
    }
    /// <method>
    /// <desc>Creates a time stamped output to the console.</desc>
    /// </method>
    public static final void Print(int obj)
    {
        System.out.println(GetTimeDataSequence() + String.valueOf(obj));
    }
    /// <method>
    /// <desc>Creates a time stamped output to the console.</desc>
    /// </method>
    public static final void Print(bool obj)
    {
        System.out.println(GetTimeDataSequence() + String.valueOf(obj));
    }
    /// <method>
    /// <desc>Creates a time stamped output to the console.</desc>
    /// </method>
    public static final void Print(double obj)
    {
        System.out.println(GetTimeDataSequence() + String.valueOf(obj));
    }
    /// <method>
    /// <desc>Creates a time stamped output to the console.</desc>
    /// </method>
    public static final void Print(long obj)
    {
        System.out.println(GetTimeDataSequence() + String.valueOf(obj));
    }
    /// <method>
    /// <desc>Creates a time stamped output to the console.</desc>
    /// </method>
    public static final void Print(char obj)
    {
        System.out.println(GetTimeDataSequence() + String.valueOf(obj));
    }
    /// <method>
    /// <desc>Creates a time stamped output to the console.</desc>
    /// </method>
    public static final void Print(Object obj)
    {
        if(obj == null)
            System.out.println(GetTimeDataSequence() + " null");
        else
            System.out.println(GetTimeDataSequence() + obj.toString());
    }
    /// <method>
    /// <desc>Creates a time stamped output to the console.</desc>
    /// </method>
    public static final void Print(Object[] obj)
    {
        StringBuilder builder = new StringBuilder();
        for(int i = 0; i < obj.length; ++i)
        {
            if(i > 0)
                builder.append(',');
            
            builder.append("\n" + i + " : ");
            builder.append(obj[i].toString());
        }


        System.out.println(GetTimeDataSequence() + builder.toString());
    }
}
/// </class>