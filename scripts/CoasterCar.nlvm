package scripts;

import com.nolimitscoaster.*;
import nlvm.math3d.*;
import nlvm.lang.Object;
import nlvm.util.Vector;

import scripts.utilities.*;
import scripts.containers.*;
import scripts.math.Mathf;

/// <class>
/// <desc>Type used for custom coaster cars; Allows customisation of restraint animations using the descriptor files, has g-force trackers placed for each camera which can be visualised and cameras can be cycled through like in-game counterparts.</desc>
public class CoasterCar extends Behaviour implements ISetableCar
{
    private TrainHandler m_Handler = null;
    private TrainHandlerManager m_HandlerManager = null;

    private Coaster m_Coaster;
    private Train m_Train;

    private int m_TrainIndex;
    private int m_CarIndex;

    private Restraint[] m_Restraints = null;

    private ElementGForceTracker[] m_GForceTrackers = null;

    private CoasterCarDescriptor m_Descriptor = null;

    public bool Start()
    {
        m_Coaster = GetCoasterParameter("coaster");
        String coasterName = m_Coaster.getName();

        m_Train = m_Coaster.findNearestTrain(m_SceneObject.getTranslation(), 5.0f);
        if(m_Train == null) NullReferenceException.Throw("Could not find train within 5 metres");
        
        m_TrainIndex = TrainUtil.GetTrainIndex(m_Train);
        m_CarIndex = GetIntegerParameter("car_index");

        String handlerName = coasterName + '_' + m_TrainIndex;


        ResourcePath descriptorFile = GetResourcePathParameter("car_descriptor");
        String descriptorText = Tools.loadTextFileFromResource(descriptorFile);
        if(descriptorText.length() <= 0)
            InvalidFormatException.Throw("Car descriptor file is empty!");

        m_Descriptor = MakeCoasterCarDescriptorFromFile(descriptorText);

            // Setup restraints
        m_Restraints = new Restraint[m_Descriptor.Restraints];
        SceneObjectElement[] restraintElements = GetElementsWithName(m_SceneObject, "Restraint");
        for(int i = 0; i < m_Descriptor.Restraints; ++i)
        {
            m_Restraints[i] = new HingeRestraint(restraintElements[i], new Vector3f(0, 0, 0), new Vector3f(90 * Mathf.DegToRad, 0, 0));
            m_Restraints[i].OpeningTime = m_Descriptor.RestraintOpenDuration;
            m_Restraints[i].ClosingTime = m_Descriptor.RestraintCloseDuration;
        }


            // Get the cameras
        List cameras = new List();
        for(int i = 0; i < m_SceneObject.getElementCount(); ++i)
        {
            SceneObjectElement element = m_SceneObject.getElementAt(i);
            if(StringUtil.Contains(element.getName(), "Camera"))
            {
                element.setVisible(false);
                cameras.Insert(element);
            }
        }

            // Create g-froce trackers for the cameras
        m_GForceTrackers = new ElementGForceTracker[cameras.Count()];
        for(int i = 0; i < m_GForceTrackers.length; ++i)
            m_GForceTrackers[i] = new ElementGForceTracker((SceneObjectElement)cameras.At(i));
            


        m_HandlerManager = TrainHandlerManager.GetInstance();
        m_Handler = m_HandlerManager.GetHandler(handlerName);
        if(m_Handler == null)
        {
            m_Handler = new TrainHandler(handlerName);
            m_HandlerManager.RegisterHandler(m_Handler);
            m_Handler.SetCarModifier(m_HandlerManager.GetDefaultCarModifier());
            m_Handler.SetCarSeats(m_Descriptor.Cameras);

            RideCameraHandler.GetInstance().RegisterTrainHandler(m_Handler);
        }
        if(m_Handler.GetCarModifier() == null) m_Handler.SetCarModifier(m_HandlerManager.GetDefaultCarModifier());

        m_Handler.RegisterCar(this);
        return true;
    }


    private float previousRestraintState = 0.0f;
    public void Update(float tick)
    {
        float restraintState = m_Train.getHarnessState();
        if(restraintState > previousRestraintState)
        {
            for(int i = 0; i < m_Restraints.length; ++i)
                m_Restraints[i].Open();
        }
        else if(restraintState < previousRestraintState)
        {
            for(int i = 0; i < m_Restraints.length; ++i)
                m_Restraints[i].Close();
        }
        previousRestraintState = restraintState;
    }



    protected CoasterCarDescriptor MakeCoasterCarDescriptorFromFile(String resource)
    {
        CoasterCarDescriptor descriptor = new CoasterCarDescriptor();

        Json head = Json.Parse(resource);
        if(!head.HasKey("mode"))
            Exception.Throw("Car descriptor file missing mode, must include mode 'trailer'");
    
            // Implement mode checking later 

        if(head.HasKey("cameras"))
            descriptor.Cameras = head.Get("cameras").GetInt();

        if(head.HasKey("restraints"))
        {
            Json restraints = head.Get("restraints");
            descriptor.Restraints = restraints.Get("count").GetInt();

            if(restraints.HasKey("open_duration"))
                descriptor.RestraintOpenDuration = restraints.Get("open_duration").GetFloat();       
            if(restraints.HasKey("close_duration"))
                descriptor.RestraintCloseDuration = restraints.Get("close_duration").GetFloat();
        }

        if(head.HasKey("rear_joint_offset"))
        {
            Json joint = head.Get("rear_joint_offset");
            descriptor.RearJointOffset.set(((Json)joint.At(0)).GetFloat(), ((Json)joint.At(1)).GetFloat(), ((Json)joint.At(2)).GetFloat());
        }
        if(head.HasKey("front_joint_offset"))
        {
            Json joint = head.Get("front_joint_offset");
            descriptor.FrontJointOffset.set(((Json)joint.At(0)).GetFloat(), ((Json)joint.At(1)).GetFloat(), ((Json)joint.At(2)).GetFloat());
        }
        descriptor.CarLength = Mathf.Abs(descriptor.FrontJointOffset.z - descriptor.RearJointOffset.z);

        if(head.HasKey("bogie_offsets") && head.Get("bogie_offsets").Count() > 0)
        {
            Json bogies = head.Get("bogie_offsets");
            float[] offsets = new float[bogies.Count()];

            IEnumerator enumerator = bogies.GetEnumerator();
            int index = 0;
            while(enumerator.MoveNext())
            {
                Json bogie = (Json)enumerator.Get();
                offsets[index++] = bogie.GetFloat();
            }
            descriptor.BogieOffsets = offsets;
        }
        else
        {
            Exception.Throw("This car has no bogies? If this is intended then im a little confused");
        }

        return descriptor;
    }

    private SceneObjectElement[] GetElementsWithName(SceneObject sceneObject, String name)
    {
        Vector elements = new Vector();
        for(int i = 0; i < sceneObject.getElementCount(); ++i)
            if(StringUtil.Contains(sceneObject.getElementAt(i).getName(), name))
                elements.addElement(sceneObject.getElementAt(i));

        SceneObjectElement[] arr = new SceneObjectElement[elements.size()];
        for(int i = 0; i < arr.length; ++i)
            arr[i] = (SceneObjectElement)elements.elementAt(i);

        return arr;
    }


    public CoasterCarDescriptor GetDescriptor()
    {
        return m_Descriptor;
    }


        // ISetable
    public void SetMatrix(Matrix4x4f matrix)
    {
        m_SceneObject.setMatrix(matrix);
    }
    public void SetData(Object object) {}

        // IGetable
    public Object GetData()
    {
        return m_SceneObject;
    }


        // ISetableCar
    public Coaster GetCoaster() { return m_Coaster; }
    public Train GetTrain() { return m_Train; }
    public int GetTrainIndex() { return m_TrainIndex; }
    public int GetCarIndex() { return m_CarIndex; }
}
/// </class>