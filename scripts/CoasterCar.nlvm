package scripts;

import com.nolimitscoaster.*;
import nlvm.math3d.*;
import nlvm.lang.Object;
import nlvm.util.Vector;

import scripts.utilities.*;
import scripts.containers.*;
import scripts.math.Mathf;

public class CoasterCar extends Behaviour implements ISetableCar
{
    private TrainHandler m_Handler = null;
    private TrainHandlerManager m_HandlerManager = null;

    private Coaster m_Coaster;
    private Train m_Train;

    private int m_TrainIndex;
    private int m_CarIndex;

    private Restraint[] m_Restraints = null;

    public bool Start()
    {
        m_Coaster = GetCoasterParameter("coaster");
        String coasterName = m_Coaster.getName();

        m_Train = m_Coaster.findNearestTrain(m_SceneObject.getTranslation(), 5.0f);
        if(m_Train == null) NullReferenceException.Throw("Could not find train within 5 metres");
        
        m_TrainIndex = TrainUtil.GetTrainIndex(m_Train);
        m_CarIndex = GetIntegerParameter("car_index");

        String handlerName = coasterName + '_' + m_TrainIndex;


        ResourcePath descriptorFile = GetResourcePathParameter("car_descriptor");
        String descriptorText = Tools.loadTextFileFromResource(descriptorFile);
        if(descriptorText.length() <= 0)
            System.throwRuntimeException("Car descriptor file is empty!");

        CoasterCarDescriptor descriptor = MakeCoasterCarDescriptorFromFile(descriptorText);

            // Setup restraints
        m_Restraints = new Restraint[descriptor.Restraints];
        SceneObjectElement[] restraintElements = GetElementsWithName(m_SceneObject, "Restraint");
        for(int i = 0; i < descriptor.Restraints; ++i)
        {
            m_Restraints[i] = new HingeRestraint(restraintElements[i], new Vector3f(0, 0, 0), new Vector3f(90 * Mathf.DegToRad, 0, 0));
            m_Restraints[i].OpeningTime = descriptor.RestraintOpenDuration;
            m_Restraints[i].ClosingTime = descriptor.RestraintCloseDuration;
        }


            // Get the cameras
        for(int i = 0; i < m_SceneObject.getElementCount(); ++i)
        {
            SceneObjectElement element = m_SceneObject.getElementAt(i);
            if(StringUtil.Contains(element.getName(), "Camera"))
                element.setVisible(false);
        }


        m_HandlerManager = TrainHandlerManager.GetInstance();
        m_Handler = m_HandlerManager.GetHandler(handlerName);
        if(m_Handler == null)
        {
            m_Handler = new TrainHandler(handlerName);
            m_HandlerManager.RegisterHandler(m_Handler);
            m_Handler.SetCarModifier(m_HandlerManager.GetDefaultCarModifier());
            m_Handler.SetCarSeats(descriptor.Cameras);

            RideCameraHandler.GetInstance().RegisterTrainHandler(m_Handler);
        }
        if(m_Handler.GetCarModifier() == null) m_Handler.SetCarModifier(m_HandlerManager.GetDefaultCarModifier());

        m_Handler.RegisterCar(this);
        return true;
    }


    float previousRestraintState = 0.0f;
    public void Update(float tick)
    {
        float restraintState = m_Train.getHarnessState();
        if(restraintState > previousRestraintState)
        {
            for(int i = 0; i < m_Restraints.length; ++i)
                m_Restraints[i].Open();
        }
        else if(restraintState < previousRestraintState)
        {
            for(int i = 0; i < m_Restraints.length; ++i)
                m_Restraints[i].Close();
        }
        previousRestraintState = restraintState;
    }



    protected CoasterCarDescriptor MakeCoasterCarDescriptorFromFile(String resource)
    {
        List pairs = new List(Parser.MiniParse(resource));
        if(pairs.Count() == 0)
            System.throwRuntimeException("CoasterCarDescriptor provided has invalid format");

        CoasterCarDescriptor descriptor = new CoasterCarDescriptor();

        while(pairs.Count() > 0)
        {
            Pair pair = (Pair)pairs.PopBack();
            if(pair.Id.equals("RESTRAINTS"))
            {
                MutableInteger mutInteger = new MutableInteger();
                bool success = pair.TryGetInteger(mutInteger);
                if(!success)
                    System.throwRuntimeException("Failed to get Integer value from pair with Id 'RESTRAINTS'");
                descriptor.Restraints = mutInteger.GetValue();
            } 
            else if (pair.Id.equals("CAMERAS")) 
            {
                MutableInteger mutInteger = new MutableInteger();
                bool success = pair.TryGetInteger(mutInteger);
                if(!success)
                    System.throwRuntimeException("Failed to get Integer value from pair with Id 'CAMERAS'");
                descriptor.Cameras = mutInteger.GetValue();
            }
            else if (pair.Id.equals("RESTRAINT_OPEN_DURATION"))
            {
                MutableDouble mutDouble = new MutableDouble();
                bool success = pair.TryGetDouble(mutDouble);
                if(!success)
                    System.throwRuntimeException("Failed to get Double value from pair with Id 'RESTRAINT_OPEN_DURATION'");
                descriptor.RestraintOpenDuration = (float)mutDouble.GetValue();
            }
            else if (pair.Id.equals("RESTRAINT_CLOSE_DURATION"))
            {
                MutableDouble mutDouble = new MutableDouble();
                bool success = pair.TryGetDouble(mutDouble);
                if(!success)
                    System.throwRuntimeException("Failed to get Double value from pair with Id 'RESTRAINT_CLOSE_DURATION'");
                descriptor.RestraintCloseDuration = (float)mutDouble.GetValue();
            }
        }
        return descriptor;
    }

    private SceneObjectElement[] GetElementsWithName(SceneObject sceneObject, String name)
    {
        Vector elements = new Vector();
        for(int i = 0; i < sceneObject.getElementCount(); ++i)
            if(StringUtil.Contains(sceneObject.getElementAt(i).getName(), name))
                elements.addElement(sceneObject.getElementAt(i));

        SceneObjectElement[] arr = new SceneObjectElement[elements.size()];
        for(int i = 0; i < arr.length; ++i)
            arr[i] = (SceneObjectElement)elements.elementAt(i);

        return arr;
    }




        // ISetable
    public void SetMatrix(Matrix4x4f matrix)
    {
        m_SceneObject.setMatrix(matrix);
    }
    public void SetData(Object object) {}

        // IGetable
    public Object GetData()
    {
        return m_SceneObject;
    }


        // ISetableCar
    public Coaster GetCoaster() { return m_Coaster; }
    public Train GetTrain() { return m_Train; }
    public int GetTrainIndex() { return m_TrainIndex; }
    public int GetCarIndex() { return m_CarIndex; }
}