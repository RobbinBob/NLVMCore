package scripts;

import nlvm.util.Vector;
import nlvm.lang.Object;
import nlvm.lang.Integer;
import nlvm.math3d.Matrix4x4f;

import com.nolimitscoaster.NoLimits;
import com.nolimitscoaster.Train;
import com.nolimitscoaster.Coaster;

import scripts.utilities.*;
import scripts.modifiers.*;
import scripts.math.*;

public class TrainHandler extends Object
{
        // TODO - make this dynamic with the registered train
    public static final BOGIES_PER_CAR = 1;

    private Vector m_Cars = null;
    private Vector m_Bogies = null;

    private String m_Name = null;

    private ICarModifier m_CarModifier = null;
    private IBogieModifier m_BogieModifier = null;

    private Train m_TrainHandled = null;

    private Matrix4x4f m_CarMatrix = new Matrix4x4f();
    private Matrix4x4f m_BogieMatrix = new Matrix4x4f();

    private float m_Distance = 0.0f;
    private float m_WrappedDistance = 0.0f;

    private int m_SeatsPerCar = 0;

        // Constructors
    public TrainHandler(String name)
    {
        m_Cars = new Vector();
        m_Bogies = new Vector();
        m_Name = name;
        m_TrainHandled = GetTrainFromString(name);
    }
    public TrainHandler(String name, int cars)
    {
        m_Cars = new Vector(cars);
        m_Bogies = new Vector(cars);
        m_Name = name;
        m_TrainHandled = GetTrainFromString(name);
    }
    public TrainHandler(String name, int cars, int bogies)
    {
        m_Cars = new Vector(cars);
        m_Bogies = new Vector(bogies);
        m_Name = name;
        m_TrainHandled = GetTrainFromString(name);
    }
    public TrainHandler(String name, int cars, int bogies, int carSeats)
    {
        m_Cars = new Vector(cars);
        m_Bogies = new Vector(bogies);
        m_Name = name;
        m_TrainHandled = GetTrainFromString(name);
        m_SeatsPerCar = carSeats;
    }

    private void SortByCarIndex()
    {
        Vector sortedVector = new Vector();
        int index = 0;
        int iterations = 0;
        while(!m_Cars.isEmpty() && iterations < 500)
        {
            for(int i = 0; i < m_Cars.size(); ++i)
            {
                if(m_Cars.elementAt(i) != null)
                {
                    ISetableCar car = (ISetableCar)m_Cars.elementAt(i);
                    if(car.GetCarIndex() != index)
                        continue;

                    sortedVector.addElement(car);
                    m_Cars.removeElementAt(i);
                }
            }
            iterations++;
            index++;
        }
        if(iterations >= 499)
            System.err.println("Aborted");

        m_Cars.clear();
        for(int i = 0; i < sortedVector.size(); ++i)
        {
            m_Cars.addElement(sortedVector.elementAt(i));
        }
    }
    private void SortByBogieIndex()
    {
        Vector sortedVector = new Vector();
        int index = 0;
        int iterations = 0;
        while(!m_Bogies.isEmpty() && iterations < 500)
        {
            for(int i = 0; i < m_Bogies.size(); ++i)
            {
                if(m_Bogies.elementAt(i) != null)
                {
                    ISetableBogie bogie = (ISetableBogie)m_Bogies.elementAt(i);
                    if(bogie.GetBogieIndex() != index)
                        continue;

                    sortedVector.addElement(bogie);
                    m_Bogies.removeElementAt(i);
                }
            }
            iterations++;
            index++;
        }
        if(iterations >= 499)
            System.err.println("Aborted");
        
        m_Bogies.clear();
        for(int i = 0; i < sortedVector.size(); ++i)
        {
            m_Bogies.addElement(sortedVector.elementAt(i));
        }
    }



        // Register/Unregister ISetableCar
    public bool RegisterCar(ISetableCar car)
    {
        if(m_Cars.contains(car) || car.GetTrain() != m_TrainHandled) return false;
        m_Cars.addElement(car);
        SortByCarIndex();
        return true;
    }
    public bool UnregisterCar(ISetableCar car)
    {
        if(!m_Cars.contains(car)) return false;
        m_Cars.removeElement(car);
        return true;
    }

        // Register/Unregister ISetableBogie
    public bool RegisterBogie(ISetableBogie bogie)
    {
        if(m_Bogies.contains(bogie) || bogie.GetTrain() != m_TrainHandled) return false;
        m_Bogies.addElement(bogie);
        SortByBogieIndex();
        return true;
    }
    public bool UnregisterBogie(ISetableBogie bogie)
    {
        if(!m_Bogies.contains(bogie)) return false;
        m_Bogies.removeElement(bogie);
        return true;
    }


        // Get/Set modifier
    public void SetCarModifier(ICarModifier modifier)
    {
        m_CarModifier = modifier;
    }
    public ICarModifier GetCarModifier()
    {
        return m_CarModifier;
    }
    public void SetBogieModifier(IBogieModifier modifier)
    {
        m_BogieModifier = modifier;
    }
    public IBogieModifier GetBogieModifier()
    {
        return m_BogieModifier;
    }

    public void UpdateTrainPosition(float tick)
    {
        float scaledSpeed = (float)m_TrainHandled.getSpeed() * tick;

        m_Distance += scaledSpeed;
        m_WrappedDistance += scaledSpeed;
        while(m_WrappedDistance > Mathf.TAU) m_WrappedDistance -= Mathf.TAU;
    }

    public void HandleCars()
    {
        for(int i = 0; i < m_Cars.size(); i++)
        {
            ISetableCar car = (ISetableCar)m_Cars.elementAt(i);
            if(car == null) System.throwRuntimeException("ISetableCar could not be cast from Object or was null");
            HandleCar(car);
        }
    }
    public void HandleCar(ISetableCar car)
    {
        m_TrainHandled.getCarMatrix(car.GetCarIndex(), m_CarMatrix);

        CarModifierData data = new CarModifierData();
        data.SetableCar = car;
        data.CarMatrix = m_CarMatrix.dup();
        data.TrainDistance = m_Distance;
        data.CarOffset = 0;

        m_CarModifier.Run(data);
    }
    public void HandleBogies()
    {
        for(int i = 0; i < m_Bogies.size(); i++)
        {
            ISetableBogie bogie = (ISetableBogie)m_Bogies.elementAt(i);
            if(bogie == null) System.throwRuntimeException("ISetableBogie could not be cast from Object or was null");
            HandleBogie(bogie);
        }
    }
    public void HandleBogie(ISetableBogie bogie)
    {
        m_TrainHandled.getBogieMatrix(bogie.GetBogieIndex(), m_BogieMatrix);
        m_TrainHandled.getCarMatrix(bogie.GetBogieIndex() / BOGIES_PER_CAR, m_CarMatrix);

        BogieModifierData data = new BogieModifierData();
        data.SetableBogie = bogie;
        data.CarMatrix = m_CarMatrix.dup();
        data.BogieMatrix = m_BogieMatrix.dup();
        data.TrainDistance = m_Distance;
        data.BogieOffset = 0;
        data.WheelRotation = m_WrappedDistance;

        m_BogieModifier.Run(data);
    }


    public void SetCarSeats(int carSeats)
    {
        m_SeatsPerCar = carSeats;
    }
    public int GetCarSeats()
    {
        return m_SeatsPerCar;
    }


    public Train GetTrain()
    {
        return m_TrainHandled;
    }
    public String GetName()
    {
        return m_Name;
    }

    public ISetableCar[] GetCars()
    {
        ISetableCar[] cars = new ISetableCar[m_Cars.size()];
        for(int i = 0; i < cars.length; i++)
        {
            cars[i] = (ISetableCar)m_Cars.elementAt(i);
        }
        return cars;
    }
    public ISetableBogie[] GetBogies()
    {
        ISetableBogie[] bogies = new ISetableBogie[m_Bogies.size()];
        for(int i = 0; i < bogies.length; i++)
        {
            bogies[i] = (ISetableBogie)m_Bogies.elementAt(i);
        }
        return bogies;
    }

    public int hashCode()
    {
        return m_Name.hashCode();
    }

    private Train GetTrainFromString(String string)
    {
        String[] data = StringUtil.SplitString(string, '_');
        if(data.length != 2) System.throwRuntimeException("Data size returned is not 2, fatal error has occured");

        Coaster coaster = NoLimits.getSimulator().getCoaster(data[0]);
        Train train = coaster.getTrainAt(Integer.parseInt(data[1]));
        return train;
    }
}