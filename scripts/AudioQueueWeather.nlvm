package scripts;

public class AudioQueueWeather extends Behaviour
{
    private AudioGroup m_AudioGroup = null;

    public int GetOrder() { return -15; }
    public bool Awake() { return true; }

    private float m_WeatherThreshold = 0;
    private bool m_HasPlayed = false;

    private int m_WeatherType = 0;
    private String m_AudioName = "";
    private int m_Priority = 0;

    public void Start()
    {
        m_AudioGroup = (AudioGroup)Registry.GetInstance().GetReferenceFromName("scripts.AudioGroup", GetStringParameter("audio_group"));
        if(m_AudioGroup == null)
            NullReferenceException.Throw("Unable to find AudioGroup with name " + GetStringParameter("audio_group"));
    
        m_WeatherType = GetIntegerParameter("weather_type");
        m_WeatherThreshold = GetFloatParameter("weather_threshold");

        m_AudioName = GetStringParameter("audio_name");
        m_Priority = GetIntegerParameter("audio_priority");
    }


    public void Update(float tick)
    {
        float currentWeatherState = 0;
        switch(m_WeatherType)
        {
                // Rain
            case 0:
                currentWeatherState = sim.getRainIntensity();
                break;
                // Snow
            case 1:
                currentWeatherState = sim.getSnowIntensity();
                break;
                // Wind
            case 2:
                currentWeatherState = sim.getWindIntensity();
                break;
                // Thunder
            case 3:
                currentWeatherState = sim.getThunderIntensity();
                break;
        }

        if(m_HasPlayed)
        {
                // If weather is still above threshold skip
            if(currentWeatherState >= m_WeatherThreshold)
                return;

            m_HasPlayed = false;
        }
        else
        {
                // If weather is below threshold skip
            if(currentWeatherState < m_WeatherThreshold)
                return;

            m_HasPlayed = true;
            m_AudioGroup.EnqueSound(m_AudioName, m_Priority);
        }
    }

}