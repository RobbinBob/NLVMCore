package scripts.core;

import scripts.*;
import scripts.utilities.StringUtil;

import com.nolimitscoaster.*;
import nlvm.lang.*;
import nlvm.math3d.*;
import nlvm.util.*;

public class RideCameraHandler implements FrameListener
{
    private static RideCameraHandler m_Instance = null;
    private Simulator m_Simulator = null;

    private Train m_ActiveTrain = null;
    private int m_Seat = 0;
    private bool m_ChangeSeatButton = false;
    private int m_Car = 0;
    private bool m_ChangeCarButton = false;

    private ExternalRideView m_ERV = null;
    private SceneObjectElement m_ERVElement = null;
    private Matrix4x4f m_ERVMatrix = null;

    private TrainHandlerManager m_TrainManager = null; 
    private TrainHandler m_ActiveHandler = null;


    private Vector m_RegisteredTrains;

    protected RideCameraHandler() 
    {
        m_Simulator = NoLimits.getSimulator();
        m_ERV = m_Simulator.createExternalRideView();
        m_TrainManager = TrainHandlerManager.GetInstance();
        m_RegisteredTrains = new Vector(12);

        m_Simulator.addFrameListener(this);
    }
    public static RideCameraHandler GetInstance()
    {
        if(m_Instance == null)
            m_Instance = new RideCameraHandler();

        return m_Instance;
    }


    public void RegisterTrainHandler(TrainHandler handler)
    {
        if(m_RegisteredTrains.contains(handler))
            return;

        m_RegisteredTrains.addElement(handler);
    }



    public void onNextFrame()
    {
        float tick = m_Simulator.getCurSimulationTickSec();

            // Skip checking nearest cameras if were inside one already
        if(m_ERV.isActive())
        {
            if(Button.isPressed(Button.NEXT_SEAT) && !m_ChangeSeatButton)
            {
                System.out.println("Change seat");
                m_ChangeSeatButton = true;
                m_Seat++;
                if(m_Seat >= m_ActiveHandler.GetCarSeats())
                    m_Seat = 0;

                System.out.println("New seat index" + m_Seat);

                ISetableCar car = m_ActiveHandler.GetCars()[m_Car];
                SceneObject carSCO = (SceneObject)car.GetData();
                SceneObjectElement[] cameras = GetElementsWithName(carSCO, "Camera");
                m_ERVElement = cameras[m_Seat];
            }
            else if(!Button.isPressed(Button.NEXT_SEAT))
            {
                m_ChangeSeatButton = false;
            }



            if(Button.isPressed(Button.NEXT_CAR) && !m_ChangeCarButton)
            {
                System.out.println("Change car");
                m_ChangeCarButton = true;
                m_Car++;
                if(m_Car >= m_ActiveHandler.GetCars().length)
                    m_Car = 0;

                System.out.println("New car index" + m_Car);

                ISetableCar car = m_ActiveHandler.GetCars()[m_Car];
                SceneObject carSCO = (SceneObject)car.GetData();
                SceneObjectElement[] cameras = GetElementsWithName(carSCO, "Camera");
                m_ERVElement = cameras[m_Seat];
            }
            else if(!Button.isPressed(Button.NEXT_CAR))
            {
                m_ChangeCarButton = false;
            }


            m_ERV.setCameraMatrix(m_ERVElement.getAbsoluteMatrix());
            return;
        }


        SceneObjectElement closestElement = null;
        float closestDist = 65565;

            // Loop over all registered trains
        for(int i = 0; i < m_RegisteredTrains.size(); ++i)
        {
            TrainHandler handler = (TrainHandler)m_RegisteredTrains.elementAt(i);         
            ISetableCar[] cars = handler.GetCars();

                // Skip if the viewer is far away from the car
            SceneObject carSCO = (SceneObject)cars[0].GetData();
            if(!m_Simulator.isViewerInsideSphere(carSCO.getTranslation(), 15.0f))
                continue;

                // Loop over the cars
            for(int j = 0; j < cars.length; ++j)
            {
                    // Skip if the viewer is far away from the car
                carSCO = (SceneObject)cars[j].GetData();
                if(!m_Simulator.isViewerInsideSphere(carSCO.getTranslation(), 5.0f))
                    continue;

                    // Loop over the cameras and find the one closest to the camera
                Vector3f viewPosition = new Vector3f();
                m_Simulator.getViewPos(viewPosition);
                SceneObjectElement[] seatCameras = GetElementsWithName(carSCO, "Camera");
                for(int k = 0; k < seatCameras.length; ++k)
                {
                    if(closestElement == null)
                    {
                        closestElement = seatCameras[k];
                        closestDist = closestElement.getAbsoluteMatrix().getTrans().sqrDistance(viewPosition);
                        continue;
                    }

                    float dist = seatCameras[k].getAbsoluteMatrix().getTrans().sqrDistance(viewPosition);
                    if(dist < closestDist)
                    {
                        closestElement = seatCameras[k];
                        closestDist = dist;
                        m_Seat = k;
                        m_Car = j;
                        m_ActiveHandler = handler;
                    }
                }
            }
        }

            // Skip if none found
        if(closestElement == null)
            return;

        m_ERV.setEnterWarpPoint(closestElement.getAbsoluteMatrix().getTrans(), 2.0f);
        m_ERV.setCameraMatrix(closestElement.getAbsoluteMatrix());
        m_ERVElement = closestElement;
    }


    private SceneObjectElement[] GetElementsWithName(SceneObject sceneObject, String name)
    {
        Vector elements = new Vector();
        for(int i = 0; i < sceneObject.getElementCount(); ++i)
            if(StringUtil.Contains(sceneObject.getElementAt(i).getName(), name))
                elements.addElement(sceneObject.getElementAt(i));

        SceneObjectElement[] arr = new SceneObjectElement[elements.size()];
        for(int i = 0; i < arr.length; ++i)
            arr[i] = (SceneObjectElement)elements.elementAt(i);

        return arr;
    }
}
