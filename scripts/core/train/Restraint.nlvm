package scripts.core.train;

import com.nolimitscoaster.SceneObjectElement;
import com.nolimitscoaster.Simulator;
import com.nolimitscoaster.FrameListener;
import com.nolimitscoaster.NoLimits;
import com.nolimitscoaster.Tools;

import scripts.core.math.Mathf;

/// <class>
/// <desc>Base class for restraints to inherit from for animating.</desc>
public abstract class Restraint extends Object implements FrameListener
{
    private Simulator m_Simulator = null;
    protected SceneObjectElement m_RestraintElement = null;

    protected static final float MIN_ACTIVATION = 0.0f;
    protected static final float MAX_ACTIVATION = 1.0f;
    private float m_CurrentActivation = MIN_ACTIVATION;

    /// <member>
    /// <desc>The time taken for the restraint to fully open.</desc>
    /// </member>
    public float OpeningTime = 2.0f;
    /// <member>
    /// <desc>The time taken for the restraint to fully close.</desc>
    /// </member>
    public float ClosingTime = 0.5f;
    /// <member>
    /// <desc>The deviation(seconds) this restraint could have before beginning animation.</desc>
    /// </member>
    public float DelayDeviation = 0.5f;

    protected static final int STATE_CLOSED = 0;
    protected static final int STATE_OPENING = 1;
    protected static final int STATE_OPEN = 2;
    protected static final int STATE_CLOSING = 3;
    private int m_State = STATE_CLOSED;


    /// <constructor>
    /// <desc>Creates a new Restraint attached to a SceneObjectElement.</desc>
    /// <arg name="restraintElement">The SceneObjectElement this restraint will animate.</arg>
    /// </constructor>
    public Restraint(SceneObjectElement restraintElement)
    {
        m_RestraintElement = restraintElement;
        m_Simulator = NoLimits.getSimulator();
    }

    /// <method>
    /// <desc>Begins opening the restraint.</desc>
    /// </method>
    public void Open()
    {
        if(m_State == STATE_CLOSED || m_State == STATE_CLOSING)
        {
            m_State = STATE_OPENING;
            m_Simulator.addFrameListener(this);
                // Apply deviation if closed
            if(m_CurrentActivation == MIN_ACTIVATION)
                m_CurrentActivation -= Mathf.Random(0.0f, DelayDeviation);
        }
    }
    /// <method>
    /// <desc>Begins closing the restraint.</desc>
    /// </method>
    public void Close()
    {
        if(m_State == STATE_OPEN || m_State == STATE_OPENING)
        {
            m_State = STATE_CLOSING;
            m_Simulator.addFrameListener(this);
                // Apply deviation if open
            if(m_CurrentActivation == MAX_ACTIVATION)
                m_CurrentActivation += Mathf.Random(0.0f, DelayDeviation);
        }
    }

    /// <method>
    /// <desc>Called each frame the restraint is updating.</desc>
    /// <arg name="activation">The current restraint activation 0 being closed, 1 fully open.</arg>
    /// </method>
    protected abstract void Update(float activation);

    public final void onNextFrame()
    {
        float tick = m_Simulator.getCurSimulationTickSec();

        switch(m_State)
        {
            case STATE_CLOSING:
            {
                if(m_CurrentActivation > MIN_ACTIVATION)
                {
                    m_CurrentActivation -= tick * (1.0f / ClosingTime);
                }
                else
                {
                    m_CurrentActivation = MIN_ACTIVATION;
                    m_State = STATE_CLOSED;
                }
                break;
            }
            case STATE_OPENING:
            {
                if(m_CurrentActivation < MAX_ACTIVATION)
                {
                    m_CurrentActivation += tick * (1.0f / OpeningTime);
                }
                else
                {
                    m_CurrentActivation = MAX_ACTIVATION;
                    m_State = STATE_OPEN;
                }
                break;
            }
            case STATE_OPEN:
            case STATE_CLOSED:
                m_Simulator.removeFrameListener(this);
                break;
        }

        Update((float)Tools.cubicRamp(Mathf.Clamp01(m_CurrentActivation)));
    }
}
/// </class>
