package scripts.core.particles;

import scripts.core.math.*;

import com.nolimitscoaster.*;
import nlvm.math3d.*;
import nlvm.lang.*;
import nlvm.util.*;

public class ParticleSystem implements FrameListener
{
    private SceneObject m_ParticleContainer = null;

    private Particle[] m_Particles = null;
    private Vector m_ActiveParticles = null;
    
    private static Simulator s_Simulator = null;

    private float m_SpawnRate = 1.0f / 2.0f;
    private float m_ElapsedTime = 0.0f;

    // Array of particle objects that have been created to service this system

    private Vector3f m_Gravity;
    private Vector3f m_InitialVelocity;

    private Matrix4x4f m_Transform = null;

    private bool m_IsEmitterActive = false;


        // Interpolators
    private IInterpFloat m_AlphaInterp = new ParticleAlpha();
    private IInterpVector3 m_ColorInterp = new ParticleColor();

    private RandomRangeFloat m_StartScaleRand = new RandomRangeFloat(1.0f, 1.0f);
    private RandomRangeFloat m_StartRotationRand = new RandomRangeFloat(0.0f, 0.0f);
    private RandomRangeFloat m_LifetimeRand = new RandomRangeFloat(5.f, 5.f);

    public static final int WORLD_SPACE = 0;
    public static final int LOCAL_SPACE = 1;
    private int m_ObjectSpace = WORLD_SPACE;

    public ParticleSystem(SceneObject particleContainer)
    {
        if(particleContainer == null)
            System.throwRuntimeException("ParticleSystem: Parameter of type 'SceneObject' with name 'particleContainer' was null");

        m_ParticleContainer = particleContainer;

        Matrix4x4f matrix = new Matrix4x4f();
        matrix.initIdentity();
        particleContainer.setMatrix(matrix);

        int elementCount = particleContainer.getElementCount();
        m_Particles = new Particle[elementCount];
        for(int i = 0; i < m_Particles.length; i++)
        {
            SceneObjectElement elementGO = particleContainer.getElementAt(i);
            elementGO.setVisible(false);
            m_Particles[i] = new Particle(this, elementGO);

        }

        m_ActiveParticles = new Vector(elementCount);
        m_Transform = new Matrix4x4f();

        s_Simulator = NoLimits.getSimulator();
    }



        // Optional Setters
    public void SetMatrix(Matrix4x4f matrix)
    {
        m_Transform = matrix.dup();
    }
    public void SetMatrixRef(Matrix4x4f matrix)
    {
        m_Transform = matrix;
    }


    public void SetTransformSpace(int transformspace)
    {
        m_ObjectSpace = transformspace;
    }


    public void SetSpawnRate(float rate)
    {
        m_SpawnRate = 1.0f / rate;
    }

    public void SetAlphaInterp(IInterpFloat interpolator)
    {
        if(interpolator == null)
            System.throwRuntimeException("IInterpFloat parameter 'interpolator' cannot be null");
        m_AlphaInterp = interpolator;
    }
    public void SetColorInterp(IInterpVector3 interpolator)
    {
        if(interpolator == null)
            System.throwRuntimeException("IInterpVector3 parameter 'interpolator' cannot be null");
        m_ColorInterp = interpolator;
    }

    public void SetStartScale(float scale)
    {
        m_StartScaleRand.Min = scale;
        m_StartScaleRand.Max = scale;
    }
    public void SetStartScale(float min, float max)
    {
        m_StartScaleRand.Min = min;
        m_StartScaleRand.Max = max;
    }

    public void SetStartRotation(float rotation)
    {
        m_StartRotationRand.Min = rotation;
        m_StartRotationRand.Max = rotation;
    }
    public void SetStartRotation(float min, float max)
    {
        m_StartRotationRand.Min = min;
        m_StartRotationRand.Max = max;
    }

    public void SetLifetime(float lifetime)
    {
        m_LifetimeRand.Min = lifetime;
        m_LifetimeRand.Max = lifetime;
    }
    public void SetLifetime(float min, float max)
    {
        m_LifetimeRand.Min = min;
        m_LifetimeRand.Max = max;
    }

        // Particle queries (Might refactor into Particle class later if performance hits)
    public float GetAlphaValue(float t) { return m_AlphaInterp.GetValue(t); }
    public Vector3f GetColorValue(float t) { return m_ColorInterp.GetValue(t); }
    public float GetStartScale() { return m_StartScaleRand.GetRandom(); }
    public float GetStartRotation() { return m_StartRotationRand.GetRandom(); }
    public float GetLifetime() { return m_LifetimeRand.GetRandom(); }

    public void SetEmitterState(bool isActive)
    {
        m_IsEmitterActive = isActive;
        if(isActive)
        {
            s_Simulator.addFrameListener(this);
        }
        else
        {
            s_Simulator.removeFrameListener(this);
        }
    }
    public bool GetEmitterState()
    {
        return m_IsEmitterActive;
    }

    private Particle GetInactiveParticle()
    {
        for(int i = 0; i < m_Particles.length; i++)
        {
            if(m_Particles[i].GetParticleState() == Particle.PARTICLE_STATE_INACTIVE)
                return m_Particles[i];
        }
        return null;
    }

    public void onNextFrame()
    {
        float delta = s_Simulator.getCurSimulationTickSec();

        m_ElapsedTime += delta;
        if(m_ElapsedTime >= m_SpawnRate)
        {
            m_ElapsedTime = 0.0f;
            Particle particle = GetInactiveParticle();
            if(particle != null)
            {
                m_ActiveParticles.addElement(particle);

                float x = ((float)Math.random() * 5.0f) - 2.5f;
                float y = ((float)Math.random() * 5.0f) + 1.0f;
                float z = ((float)Math.random() * 5.0f) - 2.5f;
                
                Matrix4x4f randomPosition = new Matrix4x4f();
                Vector3f pos = m_Transform.getTrans();
                randomPosition.initTrans(pos);

                particle.SetParticleLifetime(2.0f);
                particle.SetParticleMatrix(randomPosition);
                particle.Initialise();
            }
            else
            {
                System.out.println("Error, couldnt get particle");
            }
        }



            // Loop over active particles and update them, add to inactive list if they have completed
        Vector inactiveParticles = new Vector();
        for(int i = 0; i < m_ActiveParticles.size(); i++)
        {
            Particle particle = (Particle)m_ActiveParticles.elementAt(i);
            particle.Update(delta, m_Transform);

            if(particle.GetParticleState() == Particle.PARTICLE_STATE_INACTIVE)
                inactiveParticles.addElement(particle);
        }

            // Loop through inactive list and remove them from the main active list
        for(int j = 0; j < inactiveParticles.size(); j++)
        {
            m_ActiveParticles.removeElement((Particle)inactiveParticles.elementAt(j));
        }
    }
}