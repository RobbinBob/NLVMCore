package scripts;

import com.nolimitscoaster.*;
import nlvm.math3d.*;

import scripts.math.Mathf;

/// <class>
/// <desc>A class that allows easy manipulation of SceneObject's with key-frame animations.</desc>
public final class Animation extends UpdateableObject
{
    private SceneObject m_SceneObject = null;
    private float m_AnimationLength = 0.0f;
    private float m_CurrentAnimationTime = 0.0f;

    private float m_AnimationStartTime= 0.0f;
    private float m_AnimationEndTime = 0.0f;

    /// <member>
    /// <desc>The fixed frame-rate that all Animations run on.</desc>
    /// </member>
    public static final float FRAME_RATE = 24.f;

    private bool m_CanLoop = false;
    private bool m_Play = false;

    private bool m_PlayForward = true;

    /// <constructor>
    /// <desc>Creates a new Animation for a SceneObject.</desc>
    /// <arg name="sceneObject">The SceneObject which has a key-frame animation.</arg>
    /// </constructor>
    public Animation(SceneObject sceneObject)
    {
        if(sceneObject == null) NullReferenceException.Throw("Null reference exception for argument sceneObject");
        m_SceneObject = sceneObject;

        m_AnimationLength = (float)m_SceneObject.getMaxKeyFrameAnimationTime();
        if(m_AnimationLength <= 0) InvalidAnimationException.Throw("Could not find animation on argument sceneObject");
        m_CanLoop = false;
    }
    /// <constructor>
    /// <desc>Creates a new Animation for a SceneObject.</desc>
    /// <arg name="sceneObject">The SceneObject which has a key-frame animation.</arg>
    /// <arg name="canLoop">Specifies if the animation should loop repeatedly.</arg>
    /// </constructor>
    public Animation(SceneObject sceneObject, bool canLoop)
    {
        if(sceneObject == null) NullReferenceException.Throw("Null reference exception for argument sceneObject");
        m_SceneObject = sceneObject;

        m_AnimationLength = (float)m_SceneObject.getMaxKeyFrameAnimationTime();
        if(m_AnimationLength <= 0) InvalidAnimationException.Throw("Could not find animation on argument sceneObject");
        m_CanLoop = canLoop;
    }


    /// <method>
    /// <desc>Begins playing the animation.</desc>
    /// </method>
    public void Play()
    {
        SetShouldUpdate(true);
        m_CurrentAnimationTime = 0.0f;
        m_AnimationStartTime = 0.f;
        m_AnimationEndTime = m_AnimationLength;
        m_Play = true;
        m_PlayForward = true;
    }
    /// <method>
    /// <desc>Begins playing the animation from a time stamp.</desc>
    /// <arg name="startTime">The time(seconds) to begin playing from.</arg>
    /// </method>
    public void Play(float startTime)
    {
        startTime /= FRAME_RATE;

        if(startTime >= m_AnimationLength || startTime < 0) InvalidAnimationException.Throw("Argument 'startTime' is out of range of animation length");
        SetShouldUpdate(true);
        m_CurrentAnimationTime = startTime;
        m_AnimationStartTime = startTime;
        m_AnimationEndTime = m_AnimationLength;
        m_Play = true;
        m_PlayForward = true;
    }
    /// <method>
    /// <desc>Begins playing the animation from a time stamp and stops at another.</desc>
    /// <arg name="startTime">The time(seconds) to begin playing from.</arg>
    /// <arg name="stopTime">The time(seconds) to stop playing when reached.</arg>
    /// </method>
    public void Play(float startTime, float stopTime)
    {
        startTime /= FRAME_RATE;
        stopTime /= FRAME_RATE;

        if(startTime > m_AnimationLength || startTime < 0) InvalidAnimationException.Throw("Argument 'startTime' is out of range of animation length");
        if(stopTime > m_AnimationLength || stopTime < startTime) InvalidAnimationException.Throw("Argument 'stopTime' is out of range, argument needs to be within range " + startTime + " to " + m_AnimationLength);
        SetShouldUpdate(true);
        m_CurrentAnimationTime = startTime;
        m_AnimationStartTime = startTime;
        m_AnimationEndTime = stopTime;
        m_Play = true;
        m_PlayForward = true;
    }

    /// <method>
    /// <desc>Plays the animation in reverse from the end.</desc>
    /// </method>
    public void PlayBackward()
    {
        SetShouldUpdate(true);
        m_CurrentAnimationTime = m_AnimationLength;
        m_AnimationStartTime = m_AnimationLength;
        m_AnimationEndTime = 0.f;
        m_Play = true;
        m_PlayForward = false;
    }
    /// <method>
    /// <desc>Plays the animation in reverse from a time-stamp.</desc>
    /// <arg name="startTime">The time(seconds) to begin playing backwards from.</arg>
    /// </method>
    public void PlayBackward(float startTime)
    {
        startTime /= FRAME_RATE;

        if(startTime > m_AnimationLength || startTime <= 0) InvalidAnimationException.Throw("Argument 'startTime' is out of range of animation length");
        SetShouldUpdate(true);
        m_CurrentAnimationTime = startTime;
        m_AnimationStartTime = startTime;
        m_AnimationEndTime = 0.f;
        m_Play = true;
        m_PlayForward = false;
    }

    /// <method>
    /// <desc>Sets the animation to a given time-stamp.</desc>
    /// <arg name="timeStamp">The time(seconds) to set the animation to.</arg>
    /// </method>
    public void SetFrame(float timeStamp)
    {
        float time = timeStamp / FRAME_RATE;
        if(time < 0 || time > m_AnimationLength) InvalidAnimationException.Throw("Argument 'timeStamp' is out of range of animation length");
        m_SceneObject.setKeyFrameAnimationTime(time);
        m_CurrentAnimationTime = time;
    }

    /// <method>
    /// <desc>Pauses and resumes the animation.</desc>
    /// <return>False if stopped playing, otherwise True if began playing.</return>
    /// </method>
    public bool Pause()
    {
        m_Play = !m_Play;
        return m_Play;
    }
    /// <method>
    /// <desc>Stops the animation and resets it.</desc>
    /// </method>
    public void Stop()
    {
        SetShouldUpdate(false);
        m_Play = false;
    }

    /// <method>
    /// <desc>Gets the current frame of the animation.</desc>
    /// <return>Returns the current frame the animation is at.</return>
    /// </method>
    public int GetCurrentFrame()
    {
        return (int)Mathf.Floor(m_CurrentAnimationTime * FRAME_RATE);
    }
    /// <method>
    /// <desc>Gets the total frames in the animation.</desc>
    /// <return>Returns the overall animation frames.</return>
    /// </method>
    public int GetAnimationFrames()
    {
        return (int)Mathf.Floor(m_AnimationLength * FRAME_RATE);
    }
    /// <method>
    /// <desc>Gets the total time of the animation.</desc>
    /// <return>Returns the overall animation time(seconds).</return>
    /// </method>
    public float GetAnimationTime()
    {
        return m_AnimationLength;
    }

    /// <method>
    /// <desc>Gets the state of the animation if it's playing regardless of direction.</desc>
    /// <return>True if playing, otherwise False.</return>
    /// </method>
    public bool IsPlaying()
    {
        return m_Play;
    }
    /// <method>
    /// <desc>Gets the state of the animation if it's playing in reverse.</desc>
    /// <return>True if playing, otherwise False.</return>
    /// </method>
    public bool IsPlayingBackward()
    {
        return m_Play && !m_PlayForward;
    }
    /// <method>
    /// <desc>Gets the state of the animation if it's playing forward.</desc>
    /// <return>True if playing, otherwise False.</return>
    /// </method>
    public bool IsPlayingForward()
    {
        return m_Play && m_PlayForward;
    }

    /// <method>
    /// <desc>Gets the current Matrix4x4f of the animation.</desc>
    /// <return>The Matrix4x4f representation of the SceneObject.</return>
    /// </method>
    public Matrix4x4f GetSceneObjectMatrix()
    {
        return m_SceneObject.getMatrix();
    }
    /// <method>
    /// <desc>Gets the current Matrix4x4f of the animation.</desc>
    /// <return>The Matrix4x4f representation of the SceneObjectElement.</return>
    /// <arg name="index">The index of the child to fetch the Matrix4x4f.</arg>
    /// </method>
    public Matrix4x4f GetChildMatrix(int index)
    {
        return m_SceneObject.getElementAt(index).getAbsoluteMatrix();
    }
    /// <method>
    /// <desc>Gets the current Matrix4x4f of the animation.</desc>
    /// <return>The Matrix4x4f representation of the SceneObjectElement.</return>
    /// <arg name="name">The name of the child to fetch the Matrix4x4f.</arg>
    /// </method>
    public Matrix4x4f GetChildMatrix(String name)
    {
        return m_SceneObject.getElementForName(name).getAbsoluteMatrix();
    }


    private void PlayForwardInternal(float delta)
    {
        m_CurrentAnimationTime += delta;
            // If current time reset or stop
        if(m_CurrentAnimationTime > m_AnimationLength)
        {
            if(m_CanLoop)
            {
                m_CurrentAnimationTime = m_AnimationStartTime;
            }else
            {
                m_CurrentAnimationTime = m_AnimationEndTime;
                Stop();
            }
        }

            // If it has a separate end time use it
        if(m_AnimationEndTime >= 0.0f)
        {
            if(m_CurrentAnimationTime > m_AnimationEndTime)
            {
                if(m_CanLoop)
                {
                    m_CurrentAnimationTime = m_AnimationStartTime;
                }else
                {
                    m_CurrentAnimationTime = m_AnimationEndTime;
                    Stop();
                }
            }
        }
    }
    private void PlayBackwardInternal(float delta)
    {
        m_CurrentAnimationTime -= delta;
            // If current time reset or stop
        if(m_CurrentAnimationTime < 0.0f)
        {
            if(m_CanLoop)
            {
                m_CurrentAnimationTime = m_AnimationStartTime;
            }else
            {
                m_CurrentAnimationTime = m_AnimationEndTime;
                Stop();
            }
        }
            // If has separate end time use it
        if(m_AnimationEndTime >= 0.0f)
        {
            if(m_CurrentAnimationTime < m_AnimationEndTime)
            {
                if(m_CanLoop)
                {
                    m_CurrentAnimationTime = m_AnimationStartTime;
                }else
                {
                    m_CurrentAnimationTime = m_AnimationEndTime;
                    Stop();
                }
            }
        }
    }


    public void Update(float tick)
    {
        if(!m_Play) return;

        if(m_PlayForward)
        {
            PlayForwardInternal(tick);
        }else
        {
            PlayBackwardInternal(tick);
        }

        m_SceneObject.setKeyFrameAnimationTime(m_CurrentAnimationTime);
    }
}
/// </class>