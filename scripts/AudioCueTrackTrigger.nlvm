package scripts;

import com.nolimitscoaster.*;
import scripts.utilities.*;

public class AudioCueTrackTrigger extends AudioCue implements TrackTriggerListener
{
    private TrackTrigger m_TrackTrigger = null;
    private TrackTrigger m_StopTrigger = null;
    private int[] m_TrainWhitelist = new int[0];
    private Coaster m_Coaster = null;

    public bool Awake()
    {
        m_TrackTrigger = GetTriggerParameter("audio_trigger", false);
        if(m_TrackTrigger == null)
        {
            Debug.Warn("Cue Trigger - Track Trigger | No track trigger specified");
            return false;
        }
        m_StopTrigger = GetTriggerParameter("audio_stop_trigger", false);
        return super.Awake();
    }

    public void Start()
    {
        super.Start();
        m_TrackTrigger.addTrackTriggerListener(this);
        m_Coaster = m_TrackTrigger.getCoaster();

        if(m_StopTrigger != null)
            m_StopTrigger.addTrackTriggerListener(this);

        String params = GetStringParameter("audio_train_whitelist");
        String[] indices = StringUtil.SplitString(params, ',');
        if(indices.length == 0)
        {
            m_TrainWhitelist = new int[m_Coaster.getTrainCount()];
            for(int i = 0; i < m_TrainWhitelist.length; ++i)
                m_TrainWhitelist[i] = i;
            return;
        }

        m_TrainWhitelist = new int[indices.length];
        for (int i = 0; i < indices.length; ++i)
            m_TrainWhitelist[i] = Integer.parseInt(indices[i]);
    }

    public void onTrainEntering(TrackTrigger trigger, Train train)
    {
        bool success = false;
        for(int i = 0; i < m_TrainWhitelist.length; ++i)
        {
            if(m_Coaster.getTrainAt(m_TrainWhitelist[i]) == train)
            {
                success = true;
                break;
            }
        }
        if(!success)
            return;

        if(trigger == m_TrackTrigger)
            m_AudioController.EnqueSound(m_SoundConfig);
        if(m_StopTrigger != null)
        {
            if(trigger != m_StopTrigger)
                return;
            m_AudioController.DequeueSound(m_SoundConfig.SoundName);
        }
    }
    public void onTrainLeaving(TrackTrigger trigger, Train train) { }
}