package scripts;

import scripts.math.*;
import scripts.containers.*;

import com.nolimitscoaster.*;
import nlvm.math3d.*;

public class AudioEmitterCar extends AudioEmitter
{
    private Coaster m_Coaster = null;
    private Train m_Train = null;
    private int m_CarIndex = 0;
    private Vector3f m_CarPos = new Vector3f();

    public bool Awake()
    {
        super.Awake();

        m_Coaster = GetCoasterParameter("audio_coaster", false);
        if(m_Coaster == null)
        {
            Debug.Warn("Emitter - Car | No specified coaster found");
            return false;
        }
        if(m_Coaster.getTrainCount() == 0)
        {
            Debug.Warn("Emitter - Car | Coaster '" + m_Coaster.getName() + "' has no trains");
            return false;
        }

        m_Train = m_Coaster.findNearestTrain(m_SceneObject.getTranslation(), 15.0f);
        if(m_Train == null)
        {
            Debug.Warn("Emitter - Car | Could not find train on coaster '" + m_Coaster.getName() + "' within 15m");
            return false;
        }
        m_CarIndex = GetIntegerParameter("audio_car");
        if(m_CarIndex < 0 || m_CarIndex > m_Train.getCarCount())
        {
            Debug.Warn("Emitter - Car | The car index '" + m_CarIndex + "' is invalid for coaster '" + m_Coaster.getName() + "', must be <= " + m_Train.getCarCount());
            return false;
        }

        return true;
    }

    public void Update(float tick)
    {
        m_Train.getCarOrientationAndPosition(m_CarIndex, null, null, null, m_CarPos);
        Vector3 carPos = Vector3.FromNative(m_CarPos);
        IEnumerator enumerator = m_AudioClips.GetEnumerator();
        while(enumerator.MoveNext())
        {
            SpatialSound sound = (SpatialSound)enumerator.Get();
            sound.SetPosition(carPos);
        }
    }
}