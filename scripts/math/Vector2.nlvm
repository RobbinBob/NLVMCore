package scripts.math;

import nlvm.math3d.Vector3f;

/// <class>
/// <desc>Vector2 type.</desc>
public final class Vector2 extends Object
{
    /// <member>
    /// <desc>X axis.</desc>
    /// </member>
    public float X = 0;
    /// <member>
    /// <desc>Y axis.</desc>
    /// </member>
    public float Y = 0;

    /// <member>
    /// <desc>Left (Read Only).</desc>
    /// </member>
    public static final Vector2 Left = new Vector2(-1, 0);
    /// <member>
    /// <desc>Right (Read Only).</desc>
    /// </member>
    public static final Vector2 Right = new Vector2(1, 0);
    /// <member>
    /// <desc>Up (Read Only).</desc>
    /// </member>
    public static final Vector2 Up = new Vector2(0, 1);
    /// <member>
    /// <desc>Down (Read Only).</desc>
    /// </member>
    public static final Vector2 Down = new Vector2(0, -1);

    /// <member>
    /// <desc>Zero (Read Only).</desc>
    /// </member>
    public static final Vector2 Zero = new Vector2(0, 0);
    /// <member>
    /// <desc>One (Read Only).</desc>
    /// </member>
    public static final Vector2 One = new Vector2(1, 1);

    /// <constructor>
    /// <desc>Creates a Vector2 initialized to zeros.</desc>
    /// </constructor>
    public Vector2()
    {
        X = 0;
        Y = 0;
    }
    /// <constructor>
    /// <desc>Creates a Vector2 with each axis initialized to a scalar.</desc>
    /// <arg name="scalar">The scalar to initialize each axis with.</arg>
    /// </constructor>
    public Vector2(float scalar)
    {
        X = scalar;
        Y = scalar;
    }
    /// <constructor>
    /// <desc>Creates a Vector2 with each axis.</desc>
    /// </constructor>
    public Vector2(float x, float y)
    {
        X = x;
        Y = y;
    }
    /// <constructor>
    /// <desc>Creates a Vector2 copy from another.</desc>
    /// <arg name="copy">The vector to copy from.</arg>
    /// </constructor>
    public Vector2(Vector2 copy)
    {
        X = copy.X;
        Y = copy.Y;
    }
    /// <constructor>
    /// <desc>Creates a Vector2 copying from a Vector3, discarding the Z axis.</desc>
    /// <arg name="vector">The Vector3 to copy from.</arg>
    /// </constructor>
    public Vector2(Vector3 vector)
    {
        X = vector.X;
        Y = vector.Y;
    }
    /// <constructor>
    /// <desc>Creates a Vector2 copying from a Vector4, discarding the Z/W axis.</desc>
    /// <arg name="vector">The vector to copy from.</arg>
    /// </constructor>
    public Vector2(Vector4 vector)
    {
        X = vector.X;
        Y = vector.Y;
    }

    /// <method>
    /// <desc>Gets a copy of this vector.</desc>
    /// <return>The copy of this vector.</return>
    /// </method>
    public Vector2 Copy()
    {
        return new Vector2(this);
    }

    /// <method>
    /// <desc>Gets the length of this vector.</desc>
    /// </method>
    public float Length()
    {
        return Mathf.Sqrt(X * X + Y * Y);
    }
    /// <method>
    /// <desc>Gets the squared length of this vector.</desc>
    /// </method>
    public float LengthSqr()
    {
        return X * X + Y * Y;
    }

    /// <method>
    /// <desc>Normalizes the vector.</desc>
    /// <return>The normalized copy of the vector.</return>
    /// </method>
    public Vector2 Normalized()
    {
        float length = Length();
        if(length < 0.0001f)
            return new Vector2();

        return this.Div(length);
    }

    /// <method>
    /// <desc>Linear-interpolates between two Vector2s.</desc>
    /// <arg name="start">The starting Vector2.</arg>
    /// <arg name="end">The end Vector2.</arg>
    /// <arg name="time">The time value between 0-1, can be beyond extents.</arg>
    /// <return>The Vector2 which has been interpolated.</return>
    /// </method>
    public static Vector2 Lerp(Vector2 start, Vector2 end, float time)
    {
        return start.Mul(1 - time).Add(end.Mul(time));
    }

    /// <method>
    /// <desc>Adds a Vector2.</desc>
    /// <return>The resulting Vector2.</return>
    /// </method>
    public Vector2 Add(Vector2 right)
    {
        return new Vector2(X + right.X, Y + right.Y);
    }
    /// <method>
    /// <desc>Adds a scalar to each axis.</desc>
    /// <return>The resulting Vector2.</return>
    /// </method>
    public Vector2 Add(float scalar)
    {
        return new Vector2(X + scalar, Y + scalar);
    }

    /// <method>
    /// <desc>Substracts a Vector2.</desc>
    /// <return>The resulting Vector2.</return>
    /// </method>
    public Vector2 Sub(Vector2 right)
    {
        return new Vector2(X - right.X, Y - right.Y);
    }
    /// <method>
    /// <desc>Subtracts a scalar from each axis.</desc>
    /// <return>The resulting Vector2.</return>
    /// </method>
    public Vector2 Sub(float scalar)
    {
        return new Vector2(X - scalar, Y - scalar);
    }

    /// <method>
    /// <desc>Multiplies this by a Vector2.</desc>
    /// <return>The resulting Vector2.</return>
    /// </method>
    public Vector2 Mul(Vector2 right)
    {
        return new Vector2(X * right.X, Y * right.Y);
    }
    /// <method>
    /// <desc>Multiplies this by a scalar on each axis.</desc>
    /// <return>The resulting Vector2.</return>
    /// </method>
    public Vector2 Mul(float scalar)
    {
        return new Vector2(X * scalar, Y * scalar);
    }

    /// <method>
    /// <desc>Divides this by a Vector2.</desc>
    /// <return>The resulting Vector2.</return>
    /// </method>
    public Vector2 Div(Vector2 right)
    {
        return new Vector2(X / right.X, Y / right.Y);
    }
    /// <method>
    /// <desc>Divides this by a scalar on each axis.</desc>
    /// <return>The resulting Vector2.</return>
    /// </method>
    public Vector2 Div(float scalar)
    {
        return new Vector2(X / scalar, Y / scalar);
    }

    /// <method>
    /// <desc>Computes the dot product of two Vector2.</desc>
    /// <arg name="left">The left Vector2.</arg>
    /// <arg name="right">The right Vector2.</arg>
    /// <return>The dot product of the two Vector2s.</return>   
    /// </method>
    public static float Dot(Vector2 left, Vector2 right)
    {
        return left.X * right.X + left.Y * right.Y;
    }
    /// <method>
    /// <desc>Computes the cross product of two Vector2.</desc>
    /// <arg name="left">The left Vector2.</arg>
    /// <arg name="right">The right Vector2.</arg>
    /// <return>The cross product of the two Vector2s.</return>
    /// </method>
    public static float Cross(Vector2 left, Vector2 right)
    {
        return left.X * right.Y - left.Y * right.X;
    }

    /// <method>
    /// <desc>Computes the distance between two Vector2.</desc>
    /// <arg name="left">The left Vector2.</arg>
    /// <arg name="right">The right Vector2.</arg>
    /// <return>The distance between the two Vector2s.</return>
    /// </method>
    public static float Distance(Vector2 left, Vector2 right)
    {
        return right.Sub(left).Length();
    }
    /// <method>
    /// <desc>Computes the squared distance between two Vector2.</desc>
    /// <arg name="left">The left Vector2.</arg>
    /// <arg name="right">The right Vector2.</arg>
    /// <return>The squared distance between the two Vector2s.</return>
    /// </method>
    public static float DistanceSqr(Vector2 left, Vector2 right)
    {
        return right.Sub(left).LengthSqr();
    }

    /// <method>
    /// <desc>Swizzles all axis to one axis.</desc>
    /// <arg name="a">The axis to copy across.</arg>
    /// <return>The resulting Vector2.</return>
    /// </method>
    public Vector2 Swizzle(int a)
    {
        float[] components = new float[2];
        components[0] = X;
        components[1] = Y;
        return new Vector2(components[a]);
    }
    /// <method>
    /// <desc>Swizzles each axis to a new one.</desc>
    /// <arg name="a">The x axis swizzle.</arg>
    /// <arg name="b">The y axis swizzle.</arg>
    /// <return>The resulting Vector2.</return>
    /// </method>
    public Vector2 Swizzle(int a, int b)
    {
        float[] components = new float[2];
        components[0] = X;
        components[1] = Y;
        return new Vector2(components[a], components[b]);
    }

    /// <method>
    /// <desc>Creates a Vector2 from a nl2 API Vector3f.</desc>
    /// <arg name="nativeVector">The Vector3f to copy data from.</arg>
    /// <return>The Vector2 instance.</return>
    /// </method>
    public static Vector2 FromNative(Vector3f nativeVector)
    {
        return new Vector2(nativeVector.x, nativeVector.y);
    }
    /// <method>
    /// <desc>Returns the underlying native API type.</desc>
    /// </method>
    public Vector3f GetNative()
    {
        return new Vector3f(X, Y, 0);
    }

    /// <method>
    /// <desc>Gets the string representation of this Vector2.</desc>
    /// </method>
    public String toString()
    {
        return "X: " + X + ", Y: " + Y;
    }
    /// <method>
    /// <desc>Checks if another Vector2 equals this.</desc>
    /// <arg name="object">The Vector2 to check against.</arg>
    /// <return>True if they equal eachother, otherwise False.</return>
    /// </method>
    public bool equals(Object object)
    {
        if(object instanceof Vector2)
        {
            Vector2 vector = (Vector2)object;
            return X == vector.X && Y == vector.Y;
        }
        return false;
    }
}
/// </class>