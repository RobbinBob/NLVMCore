package scripts.math;

import nlvm.math3d.*;
import com.nolimitscoaster.Tools;

/// <class>
/// <desc>A wrapper for the native Matrix4x4f type with some extra QoL methods.</desc>
public final class Matrix4x4 extends Object
{
    private Matrix4x4f m_NativeMatrix = null;

    /// <member>
    /// <desc>Collumn 1, Row 1.</desc>
    /// </member>
    public static final int A1 = Matrix4x4f.a1;
    /// <member>
    /// <desc>Collumn 2, Row 1.</desc>
    /// </member>
    public static final int A2 = Matrix4x4f.a2;
    /// <member>
    /// <desc>Collumn 3, Row 1.</desc>
    /// </member>
    public static final int A3 = Matrix4x4f.a3;
    /// <member>
    /// <desc>Collumn 4, Row 1.</desc>
    /// </member>
    public static final int A4 = Matrix4x4f.a4;

    /// <member>
    /// <desc>Collumn 1, Row 2.</desc>
    /// </member>
    public static final int B1 = Matrix4x4f.b1;
    /// <member>
    /// <desc>Collumn 2, Row 2.</desc>
    /// </member>
    public static final int B2 = Matrix4x4f.b2;
    /// <member>
    /// <desc>Collumn 3, Row 2.</desc>
    /// </member>
    public static final int B3 = Matrix4x4f.b3;
    /// <member>
    /// <desc>Collumn 4, Row 2.</desc>
    /// </member>
    public static final int B4 = Matrix4x4f.b4;

    /// <member>
    /// <desc>Collumn 1, Row 3.</desc>
    /// </member>
    public static final int C1 = Matrix4x4f.c1;
    /// <member>
    /// <desc>Collumn 2, Row 3.</desc>
    /// </member>
    public static final int C2 = Matrix4x4f.c2;
    /// <member>
    /// <desc>Collumn 3 Row 3.</desc>
    /// </member>
    public static final int C3 = Matrix4x4f.c3;
    /// <member>
    /// <desc>Collumn 4, Row 3.</desc>
    /// </member>
    public static final int C4 = Matrix4x4f.c4;

    /// <member>
    /// <desc>Collumn 1, Row 4.</desc>
    /// </member>
    public static final int D1 = Matrix4x4f.d1;
    /// <member>
    /// <desc>Collumn 2, Row 4.</desc>
    /// </member>
    public static final int D2 = Matrix4x4f.d2;
    /// <member>
    /// <desc>Collumn 3, Row 4.</desc>
    /// </member>
    public static final int D3 = Matrix4x4f.d3;
    /// <member>
    /// <desc>Collumn 4, Row 4.</desc>
    /// </member>
    public static final int D4 = Matrix4x4f.d4;

    /// <constructor>
    /// <desc>Creates a new Matrix4x4 instance initialised to identity.</desc>
    /// </constructor>
    public Matrix4x4()
    {
        m_NativeMatrix = new Matrix4x4f();
        m_NativeMatrix.initIdentity();
    }
    /// <constructor>
    /// <desc>Creates a new Matrix4x4 instance as a copy.</desc>
    /// <arg name="copy">The Matrix4x4 to copy across.</arg>
    /// </constructor>
    public Matrix4x4(Matrix4x4 copy)
    {
        m_NativeMatrix = new Matrix4x4f();
        Set(copy);
    }
    /// <constructor>
    /// <desc>Creates a new Matrix4x4 instance.</desc>
    /// </constructor>
    public Matrix4x4(float a1, float a2, float a3, float a4, float b1, float b2, float b3, float b4, float c1, float c2, float c3, float c4, float d1, float d2, float d3, float d4)
    {
        m_NativeMatrix = new Matrix4x4f();
        float[] elems = m_NativeMatrix.elems();
        elems[A1] = a1;
        elems[A2] = a2;
        elems[A3] = a3;
        elems[A4] = a4;

        elems[B1] = b1;
        elems[B2] = b2;
        elems[B3] = b3;
        elems[B4] = b4;

        elems[C1] = c1;
        elems[C2] = c2;
        elems[C3] = c3;
        elems[C4] = c4;

        elems[D1] = d1;
        elems[D2] = d2;
        elems[D3] = d3;
        elems[D4] = d4;
    }

    /// <method>
    /// <desc>Creates a new transform Matrix4x4.</desc>
    /// </method>
    public static Matrix4x4 AsTranslation(float x, float y, float z)
    {
        Matrix4x4 matrix = new Matrix4x4();
        matrix.m_NativeMatrix.initTrans(x, y, z);
        return matrix;
    }
    /// <method>
    /// <desc>Creates a new rotation Matrix4x4.</desc>
    /// </method>
    public static Matrix4x4 AsRotation(float x, float y, float z)
    {
        Matrix4x4 matrix = new Matrix4x4();

        Matrix4x4f rotation = new Matrix4x4f();
        rotation.initXRot(x);
        matrix.m_NativeMatrix.multRight(rotation);

        rotation.initYRot(y);
        matrix.m_NativeMatrix.multRight(rotation);
        
        rotation.initZRot(z);
        matrix.m_NativeMatrix.multRight(rotation);

        return matrix;
    }
    /// <method>
    /// <desc>Creates a new scale Matrix4x4.</desc>
    /// </method>
    public static Matrix4x4 AsScale(float x, float y, float z)
    {
        Matrix4x4 matrix = new Matrix4x4();
        matrix.m_NativeMatrix.initScal(x, y, z);
        return matrix;
    }
    
    /// <method>
    /// <desc>Returns this Matrix4x4's position.</desc>
    /// <arg name="outPosition">The Vector3f that will be written to.</arg>
    /// </method>
    public void GetPosition(Vector3f outPosition)
    {
        m_NativeMatrix.getTrans(outPosition);
    }
    /// <method>
    /// <desc>Sets this Matrix4x4's position.</desc>
    /// <arg name="position">The Vector3f position to copy.</arg>
    /// </method>
    public void SetPosition(Vector3f position)
    {
        m_NativeMatrix.setElemAt(3, 0, position.x);
        m_NativeMatrix.setElemAt(3, 1, position.y);
        m_NativeMatrix.setElemAt(3, 2, position.z);
    }

    /// <method>
    /// <desc>Performs a left multiplication.</desc>
    /// </method>
    public void LeftMultiply(Matrix4x4 left)
    {
        m_NativeMatrix.multLeft(left.m_NativeMatrix);
    }
    /// <method>
    /// <desc>Performs a right multiplication.</desc>
    /// </method>
    public void RightMultiply(Matrix4x4 right)
    {
        m_NativeMatrix.multRight(right.m_NativeMatrix);
    }

    /// <method>
    /// <desc>Transforms the vector by the matrix with the virtual 4th component being 0.</desc>
    /// </method>
    public void TransformVector3Zero(Vector3f vector)
    {
        Vector4f v = new Vector4f(vector.x, vector.y, vector.z, 0);
        m_NativeMatrix.multVector(v, v);
        vector.set(v.x, v.y, v.z);
    }
    /// <method>
    /// <desc>Transforms the vector by the matrix with the virtual 4th component being 1.</desc>
    /// </method>
    public void TransformVector3One(Vector3f vector)
    {
        Vector4f v = new Vector4f(vector.x, vector.y, vector.z, 1);
        m_NativeMatrix.multVector(v, v);
        vector.set(v.x, v.y, v.z);
    }

    /// <method>
    /// <desc>Inverts the matrix.</desc>
    /// </method>
    public void Invert()
    {
        m_NativeMatrix.invert();
    }

    /// <method>
    /// <desc>Sets this matrix as a copy.</desc>
    /// </method>
    public void Set(Matrix4x4 copy)
    {
        float[] inComp = m_NativeMatrix.elems();
        float[] copyComp = copy.m_NativeMatrix.elems();

        for(int i = 0; i < 16; ++i)
            inComp[i] = copyComp[i];
    }
    /// <method>
    /// <desc>Sets this matrix as a copy.</desc>
    /// </method>
    public void Set(Matrix4x4f copy)
    {
        float[] inComp = m_NativeMatrix.elems();
        float[] copyComp = copy.elems();

        for(int i = 0; i < 16; ++i)
            inComp[i] = copyComp[i];
    }
    /// <method>
    /// <desc>Sets this matrix component.</desc>
    /// </method>
    public void Set(int collumn, int row, float value)
    {
        m_NativeMatrix.setElemAt(collumn, row, value);
    }
    /// <method>
    /// <desc>Sets this matrix component using the index.</desc>
    /// </method>
    public void Set(int index, float value)
    {
        float[] elems = m_NativeMatrix.elems();//[index] = value;
        elems[index] = value;
    }

    /// <method>
    /// <desc>Interpolate between two matrices.</desc>
    /// </method>
    public static Matrix4x4 Lerp(float t, Matrix4x4 in, Matrix4x4 out)
    {
        float[] inComp = in.m_NativeMatrix.elems();
        float[] outComp = out.m_NativeMatrix.elems();

        Matrix4x4 matrix = new Matrix4x4();
        float[] comp = matrix.m_NativeMatrix.elems();

        for(int i = 0; i < 16; ++i)
            comp[i] = Tools.lerp(t, inComp[i], outComp[i]);
        
        return matrix;
    }

    /// <method>
    /// <desc>Creates a Matrix4x4 from the native Matrix4x4f type.</desc>
    /// </method>
    public static Matrix4x4 FromNative(Matrix4x4f nativeMatrix)
    {
        Matrix4x4 matrix = new Matrix4x4();
        float[] inComp = matrix.m_NativeMatrix.elems();
        float[] copyComp = nativeMatrix.elems();

        for(int i = 0; i < 16; ++i)
            inComp[i] = copyComp[i];

        return matrix;
    }
    /// <method>
    /// <desc>Returns the matrix as athe native Matrix4x4f type.</desc>
    /// <arg name="outmMatrix">The matrix that will be written to.</arg>
    /// </method>
    public void GetNative(Matrix4x4f outMatrix)
    {
        float[] outComp = outMatrix.elems();
        float[] copyComp = m_NativeMatrix.elems();

        for(int i = 0; i < 16; ++i)
            outComp[i] = copyComp[i];
    }
}
/// </class>