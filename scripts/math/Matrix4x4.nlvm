package scripts.math;

import nlvm.math3d.*;
import com.nolimitscoaster.Tools;

/// <class>
/// <desc>Immutable Matrix4x4 type.</desc>
public final class Matrix4x4 extends Object
{
    private Matrix4x4f m_NativeMatrix = null;
    private float[] m_NativeComponents = null;

    /// <member>
    /// <desc>Collumn 1, Row 1 (Read Only).</desc>
    /// </member>
    public static final int A1 = Matrix4x4f.a1;
    /// <member>
    /// <desc>Collumn 2, Row 1 (Read Only).</desc>
    /// </member>
    public static final int A2 = Matrix4x4f.a2;
    /// <member>
    /// <desc>Collumn 3, Row 1 (Read Only).</desc>
    /// </member>
    public static final int A3 = Matrix4x4f.a3;
    /// <member>
    /// <desc>Collumn 4, Row 1 (Read Only).</desc>
    /// </member>
    public static final int A4 = Matrix4x4f.a4;

    /// <member>
    /// <desc>Collumn 1, Row 2 (Read Only).</desc>
    /// </member>
    public static final int B1 = Matrix4x4f.b1;
    /// <member>
    /// <desc>Collumn 2, Row 2 (Read Only).</desc>
    /// </member>
    public static final int B2 = Matrix4x4f.b2;
    /// <member>
    /// <desc>Collumn 3, Row 2 (Read Only).</desc>
    /// </member>
    public static final int B3 = Matrix4x4f.b3;
    /// <member>
    /// <desc>Collumn 4, Row 2 (Read Only).</desc>
    /// </member>
    public static final int B4 = Matrix4x4f.b4;

    /// <member>
    /// <desc>Collumn 1, Row 3 (Read Only).</desc>
    /// </member>
    public static final int C1 = Matrix4x4f.c1;
    /// <member>
    /// <desc>Collumn 2, Row 3 (Read Only).</desc>
    /// </member>
    public static final int C2 = Matrix4x4f.c2;
    /// <member>
    /// <desc>Collumn 3 Row 3 (Read Only).</desc>
    /// </member>
    public static final int C3 = Matrix4x4f.c3;
    /// <member>
    /// <desc>Collumn 4, Row 3 (Read Only).</desc>
    /// </member>
    public static final int C4 = Matrix4x4f.c4;

    /// <member>
    /// <desc>Collumn 1, Row 4 (Read Only).</desc>
    /// </member>
    public static final int D1 = Matrix4x4f.d1;
    /// <member>
    /// <desc>Collumn 2, Row 4 (Read Only).</desc>
    /// </member>
    public static final int D2 = Matrix4x4f.d2;
    /// <member>
    /// <desc>Collumn 3, Row 4 (Read Only).</desc>
    /// </member>
    public static final int D3 = Matrix4x4f.d3;
    /// <member>
    /// <desc>Collumn 4, Row 4 (Read Only).</desc>
    /// </member>
    public static final int D4 = Matrix4x4f.d4;


    /// <member>
    /// <desc>Matrix4x4 initialized with the identity (Read Only).</desc>
    /// </member>
    public static final Matrix4x4 Identity = new Matrix4x4();


    /// <constructor>
    /// <desc>Creates a new Matrix4x4 instance initialised to identity.</desc>
    /// </constructor>
    public Matrix4x4()
    {
        m_NativeMatrix = new Matrix4x4f();
        m_NativeMatrix.initIdentity();
        m_NativeComponents = m_NativeMatrix.elems();
    }
    /// <constructor>
    /// <desc>Creates a new Matrix4x4 instance as a copy.</desc>
    /// <arg name="copy">The Matrix4x4 to copy across.</arg>
    /// </constructor>
    public Matrix4x4(Matrix4x4 copy)
    {
        m_NativeMatrix = new Matrix4x4f();
        m_NativeComponents = m_NativeMatrix.elems();
        float[] copyComponents = copy.m_NativeComponents;
        for(int i = 0; i < copyComponents.length; ++i)
            m_NativeComponents[i] = copyComponents[i];
    }
    /// <constructor>
    /// <desc>Creates a new Matrix4x4 with each component.</desc>
    /// </constructor>
    public Matrix4x4(float a1, float a2, float a3, float a4, float b1, float b2, float b3, float b4, float c1, float c2, float c3, float c4, float d1, float d2, float d3, float d4)
    {
        m_NativeMatrix = new Matrix4x4f();
        m_NativeComponents = m_NativeMatrix.elems();
        m_NativeComponents[A1] = a1;
        m_NativeComponents[A2] = a2;
        m_NativeComponents[A3] = a3;
        m_NativeComponents[A4] = a4;

        m_NativeComponents[B1] = b1;
        m_NativeComponents[B2] = b2;
        m_NativeComponents[B3] = b3;
        m_NativeComponents[B4] = b4;

        m_NativeComponents[C1] = c1;
        m_NativeComponents[C2] = c2;
        m_NativeComponents[C3] = c3;
        m_NativeComponents[C4] = c4;

        m_NativeComponents[D1] = d1;
        m_NativeComponents[D2] = d2;
        m_NativeComponents[D3] = d3;
        m_NativeComponents[D4] = d4;

    }
    /// <constructor>
    /// <desc>Creates a Matrix4x4 using the 4 column components.</desc>
    /// <arg name="right">The right vector.</arg>
    /// <arg name="up">The up vector.</arg>
    /// <arg name="forward">The forward vector.</arg>
    /// <arg name="position">The position of the matrix.</arg>
    /// </constructor>
    public Matrix4x4(Vector4 right, Vector4 up, Vector4 forward, Vector4 position)
    {
        m_NativeMatrix = new Matrix4x4f();
        m_NativeMatrix.initIdentity();
        m_NativeComponents = m_NativeMatrix.elems();
        SetColumns(new Vector3(right), new Vector3(up), new Vector3(forward), new Vector3(position));
        m_NativeComponents[D4] = position.W;
    }
    /// <constructor>
    /// <desc>Creates a Matrix4x4 using the 4 column components.</desc>
    /// <arg name="right">The right vector.</arg>
    /// <arg name="up">The up vector.</arg>
    /// <arg name="forward">The forward vector.</arg>
    /// <arg name="position">The position of the matrix.</arg>
    /// </constructor>
    public Matrix4x4(Vector3 right, Vector3 up, Vector3 forward, Vector3 position)
    {
        m_NativeMatrix = new Matrix4x4f();
        m_NativeMatrix.initIdentity();
        m_NativeComponents = m_NativeMatrix.elems();
        SetColumns(right, up, forward, position);
    }



    /// <method>
    /// <desc>Creates a translation Matrix4x4.</desc>
    /// <return>The translation Matrix4x4.</return>
    /// </method>
    public static Matrix4x4 AsTranslation(float x, float y, float z)
    {
        Matrix4x4 matrix = new Matrix4x4();
        matrix.m_NativeMatrix.initTrans(x, y, z);
        return matrix;
    }
    /// <method>
    /// <desc>Creates a translation Matrix4x4.</desc>
    /// <return>The translation Matrix4x4.</return>
    /// </method>
    public static Matrix4x4 AsTranslation(Vector3 translation)
    {
        return AsTranslation(translation.X, translation.Y, translation.Z);
    }

    /// <method>
    /// <desc>Creates a rotation Matrix4x4.</desc>
    /// <return>The rotation Matrix4x4.</return>
    /// </method>
    public static Matrix4x4 AsRotation(float x, float y, float z)
    {
        Matrix4x4 matrix = new Matrix4x4();
        Matrix4x4f rotation = new Matrix4x4f();

        if(x != 0)
        {
            rotation.initXRot(x);
            matrix.m_NativeMatrix.multRight(rotation);
        }
        if(y != 0)
        {
            matrix.m_NativeMatrix.multRight(rotation);
            rotation.initYRot(y);
        }    
        if(z != 0)
        {
            rotation.initZRot(z);
            matrix.m_NativeMatrix.multRight(rotation);
        }

        return matrix;
    }
    /// <method>
    /// <desc>Creates a rotation Matrix4x4.</desc>
    /// <return>The rotation Matrix4x4.</return>
    /// </method>
    public static Matrix4x4 AsRotation(Vector3 rotation)
    {
        return AsRotation(rotation.X, rotation.Y, rotation.Z);
    }

    /// <method>
    /// <desc>Creates a scale Matrix4x4.</desc>
    /// <return>The scale Matrix4x4.</return>
    /// </method>
    public static Matrix4x4 AsScale(float x, float y, float z)
    {
        Matrix4x4 matrix = new Matrix4x4();
        matrix.m_NativeMatrix.initScal(x, y, z);
        return matrix;
    }
    /// <method>
    /// <desc>Creates a scale Matrix4x4.</desc>
    /// <return>The scale Matrix4x4.</return>
    /// </method>
    public static Matrix4x4 AsScale(Vector3 scale)
    {
        return AsScale(scale.X, scale.Y, scale.Z);
    }
    /// <method>
    /// <desc>Creates a scale Matrix4x4.</desc>
    /// <return>THe scale Matrix4x4.</return>
    /// </method>
    public static Matrix4x4 AsScale(float scale)
    {
        return AsScale(scale, scale, scale);
    }


    /// <method>
    /// <desc>Creates a Matrix4x4 looking towards a target.</desc>
    /// <arg name="eye">The position of the eye looking outward.</arg>
    /// <arg name="target">The position to look at from the eye.</arg>
    /// <arg name="up">The up vector to use as a basis for rotation.</arg>
    /// <return>The translated and rotated Matrix4x4.</return>
    /// </method>
    public static Matrix4x4 LookTo(Vector3 eye, Vector3 target, Vector3 up)
    {
        Vector3 zaxis = eye.Sub(target).Normalized();

        if(Mathf.Abs(Vector3.Dot(zaxis, up)) >= 0.999f)
            up = new Vector3(0, 0, 1);

        Vector3 xaxis = Vector3.Cross(up, zaxis).Normalized();
        Vector3 yaxis = Vector3.Cross(zaxis, xaxis).Normalized();

        Matrix4x4 matrix = new Matrix4x4(
            xaxis.X, yaxis.X, zaxis.X, eye.X,
            xaxis.Y, yaxis.Y, zaxis.Y, eye.Y,
            xaxis.Z, yaxis.Z, zaxis.Z, eye.Z,
            0, 0, 0, 1
        );

        return matrix;
    }


    /// <method>
    /// <desc>Returns this Matrix4x4's position.</desc>
    /// <return>The position.</return>
    /// </method>
    public Vector3 GetPosition()
    {
        return new Vector3(m_NativeComponents[A4], m_NativeComponents[B4], m_NativeComponents[C4]);
    }
    /// <method>
    /// <desc>Sets the Matrix4x4 position.</desc>
    /// <arg name="position">The Vector3 position to copy.</arg>
    /// <return>The modified Matrix4x4.</return>
    /// </method>
    public Matrix4x4 SetPosition(Vector3 position)
    {
        Matrix4x4 copy = new Matrix4x4(this);
        copy.m_NativeComponents[A4] = position.X;
        copy.m_NativeComponents[B4] = position.Y;
        copy.m_NativeComponents[C4] = position.Z;
        return copy;
    }

    /// <method>
    /// <desc>Performs a left multiplication.</desc>
    /// <return>The modified Matrix4x4.</return>
    /// </method>
    public Matrix4x4 LeftMultiply(Matrix4x4 left)
    {
        Matrix4x4 copy = new Matrix4x4(this);
        copy.m_NativeMatrix.multLeft(left.m_NativeMatrix);
        return copy;
    }
    /// <method>
    /// <desc>Performs a right multiplication.</desc>
    /// <return>The modified Matrix4x4.</return>
    /// </method>
    public Matrix4x4 RightMultiply(Matrix4x4 right)
    {
        Matrix4x4 copy = new Matrix4x4(this);
        copy.m_NativeMatrix.multRight(right.m_NativeMatrix);
        return copy;
    }

    /// <method>
    /// <desc>Transforms the vector by the matrix with the virtual 4th component being 0.</desc>
    /// <return>The resulting vector.</return>
    /// </method>
    public Vector3 TransformVector3Zero(Vector3 vector)
    {
        Vector4f v = new Vector4f(vector.X, vector.Y, vector.Z, 0);
        m_NativeMatrix.multVector(v, v);
        return new Vector3(v.x, v.y, v.z);
    }
    /// <method>
    /// <desc>Transforms the vector by the matrix with the virtual 4th component being 1.</desc>
    /// <return>The resulting vector.</return>
    /// </method>
    public Vector3 TransformVector3One(Vector3 vector)
    {
        Vector4f v = new Vector4f(vector.X, vector.Y, vector.Z, 1);
        m_NativeMatrix.multVector(v, v);
        return new Vector3(v.x, v.y, v.z);
    }

    /// <method>
    /// <desc>Inverts the matrix.</desc>
    /// <return>The inverted Matrix4x4.</return>
    /// </method>
    public Matrix4x4 Invert()
    {
        Matrix4x4 copy = new Matrix4x4(this);
        copy.m_NativeMatrix.invert();
        return copy;
    }

    /// <method>
    /// <desc>Gets the Matrix4x4's right vector.</desc>
    /// <return>A copy of the right vector.</return>
    /// </method>
    public Vector3 GetRight()
    {
        return new Vector3(m_NativeComponents[A1], m_NativeComponents[B1], m_NativeComponents[C1]);
    }
    /// <method>
    /// <desc>Gets the Matrix4x4's up vector.</desc>
    /// <return>A copy of the up vector.</return>
    /// </method>
    public Vector3 GetUp()
    {
        return new Vector3(m_NativeComponents[A2], m_NativeComponents[B2], m_NativeComponents[C2]);
    }
    /// <method>
    /// <desc>Gets the Matrix4x4's forward vector.</desc>
    /// <return>A copy of the forward vector.</return>
    /// </method>
    public Vector3 GetForward()
    {
        Vector3 backward = new Vector3(m_NativeComponents[A3], m_NativeComponents[B3], m_NativeComponents[C3]);
        return backward.Mul(-1);
    }

    /// <method>
    /// <desc>Sets the Matrix4x4's right vector.</desc>
    /// <return>The modified Matrix4x4.</return>
    /// </method>
    public Matrix4x4 SetRight(Vector3 right)
    {
        Matrix4x4 copy = new Matrix4x4(this);
        copy.m_NativeComponents[A1] = right.X;
        copy.m_NativeComponents[B1] = right.Y;
        copy.m_NativeComponents[C1] = right.Z;
        return copy;
    }
    /// <method>
    /// <desc>Sets the Matrix4x4's up vector.</desc>
    /// <return>The modified Matrix4x4.</return>
    /// </method>
    public Matrix4x4 SetUp(Vector3 up)
    {
        Matrix4x4 copy = new Matrix4x4(this);
        copy.m_NativeComponents[A2] = up.X;
        copy.m_NativeComponents[B2] = up.Y;
        copy.m_NativeComponents[C2] = up.Z;
        return copy;
    }
    /// <method>
    /// <desc>Sets the Matrix4x4's forward vector.</desc>
    /// <return>The modified Matrix4x4.</return>
    /// </method>
    public Matrix4x4 SetForward(Vector3 forward)
    {
        Matrix4x4 copy = new Matrix4x4(this);
        Vector3 backward = forward.Mul(-1);
        copy.m_NativeComponents[A3] = backward.X;
        copy.m_NativeComponents[B3] = backward.Y;
        copy.m_NativeComponents[C3] = backward.Z;
        return copy;
    }

    /// <method>
    /// <desc>Sets the Matrix4x4's collumns, each parameter can be null.</desc>
    /// <arg name="right">The right vector.</arg>
    /// <arg name="up">The up vector.</arg>
    /// <arg name="forward">The forward vector.</arg>
    /// <arg name="position">The position of the matrix.</arg>
    /// <return>The modified Matrix4x4.</return>
    /// </method>
    public Matrix4x4 SetColumns(Vector3 right, Vector3 up, Vector3 forward, Vector3 position)
    {
        Matrix4x4 copy = new Matrix4x4(this);
        float[] nativeArray = copy.m_NativeComponents;
        if(right != null)
        {
            nativeArray[A1] = right.X;
            nativeArray[B1] = right.Y;
            nativeArray[C1] = right.Z;
        }
        if(up != null)
        {
            nativeArray[A2] = up.X;
            nativeArray[B2] = up.Y;
            nativeArray[C2] = up.Z;
        }
        if(forward != null)
        {
            Vector3 backward = forward.Mul(-1);
            nativeArray[A3] = backward.X;
            nativeArray[B3] = backward.Y;
            nativeArray[C3] = backward.Z;
        }
        if(position != null)
        {
            nativeArray[A4] = position.X;
            nativeArray[B4] = position.Y;
            nativeArray[C4] = position.Z;
        }
        return copy;
    }


    /// <method>
    /// <desc>Interpolate between two matrices.</desc>
    /// </method>
    public static Matrix4x4 Lerp(float t, Matrix4x4 in, Matrix4x4 out)
    {
        float[] inComp = in.m_NativeMatrix.elems();
        float[] outComp = out.m_NativeMatrix.elems();

        Matrix4x4 matrix = new Matrix4x4();
        float[] comp = matrix.m_NativeMatrix.elems();

        for(int i = 0; i < 16; ++i)
            comp[i] = Tools.lerp(t, inComp[i], outComp[i]);
        
        return matrix;
    }

    /// <method>
    /// <desc>Creates a Matrix4x4 from the native Matrix4x4f type.</desc>
    /// </method>
    public static Matrix4x4 FromNative(Matrix4x4f nativeMatrix)
    {
        Matrix4x4 matrix = new Matrix4x4();
        float[] inComp = matrix.m_NativeMatrix.elems();
        float[] copyComp = nativeMatrix.elems();

        for(int i = 0; i < 16; ++i)
            inComp[i] = copyComp[i];

        return matrix;
    }
    /// <method>
    /// <desc>Gets underlying Matrix4x4f type.</desc>
    /// <arg name="outmMatrix">The matrix that will be written to.</arg>
    /// </method>
    public void GetNative(Matrix4x4f outMatrix)
    {
        float[] outComp = outMatrix.elems();
        float[] copyComp = m_NativeMatrix.elems();

        for(int i = 0; i < 16; ++i)
            outComp[i] = copyComp[i];
    }
    /// <method>
    /// <desc>Gets the underlying Matrix4x4f type.</desc>
    /// <return>A copy of the Matrix4x4f type used with the native API.</return>
    /// </method>
    public Matrix4x4f GetNative()
    {
        Matrix4x4f outMatrix = new Matrix4x4f();

        float[] outComp = outMatrix.elems();
        float[] copyComp = m_NativeMatrix.elems();

        for(int i = 0; i < 16; ++i)
            outComp[i] = copyComp[i];

        return outMatrix;
    }

    /// <method>
    /// <desc>Returns a String representation of this Matrix4x4.</desc>
    /// </method>
    public String toString()
    {
        float[] c = m_NativeComponents;

        return 
            "\nrx: " + c[A1] + ", tx: " + c[A2] + ", bx: " + c[A3] + ", px: " + c[A4] + 
            "\nry: " + c[B1] + ", ty: " + c[B2] + ", by: " + c[B3] + ", py: " + c[B4] + 
            "\nrz: " + c[C1] + ", tz: " + c[C2] + ", bz: " + c[C3] + ", pz: " + c[C4] + 
            "\nrw: " + c[D1] + ", tw: " + c[D2] + ", bw: " + c[D3] + ", pw: " + c[D4]; 
    }
}
/// </class>