package scripts.math;

import nlvm.math3d.Vector3f;

/// <class>
/// <desc>Vector3 type.</desc>
public final class Vector3 extends Object
{
    public float X = 0;
    public float Y = 0;
    public float Z = 0;

    public static final Vector3 Left = new Vector3(-1, 0, 0);
    public static final Vector3 Right = new Vector3(1, 0, 0);
    public static final Vector3 Up = new Vector3(0, 1, 0);
    public static final Vector3 Down = new Vector3(0, -1, 0);
    public static final Vector3 Forward = new Vector3(0, 0, 1);
    public static final Vector3 Backward = new Vector3(0, 0, -1);

    public static final Vector3 Zero = new Vector3(0, 0, 0);
    public static final Vector3 One = new Vector3(1, 1, 1);

    public Vector3()
    {
        X = 0;
        Y = 0;
        Z = 0;
    }
    public Vector3(float s)
    {
        X = s;
        Y = s;
        Z = s;
    }
    public Vector3(float x, float y, float z)
    {
        X = x;
        Y = y;
        Z = z;
    }
    public Vector3(Vector3 copy)
    {
        X = copy.X;
        Y = copy.Y;
        Z = copy.Z;
    }
    public Vector3(Vector4 vector)
    {
        X = vector.X;
        Y = vector.Y;
        Z = vector.Z;
    }
    public Vector3(Vector2 vector)
    {
        X = vector.X;
        Y = vector.Y;
        Z = 0;
    }

    public Vector3 Copy()
    {
        return new Vector3(this);
    }

    public float Length()
    {
        return Mathf.Sqrt(X * X + Y * Y + Z * Z);
    }
    public float LengthSqr()
    {
        return X * X + Y * Y + Z * Z;
    }

    public Vector3 Normalized()
    {
        float length = Length();
        if(length < 0.0001f)
            return new Vector3();

        return Div(length);
    }


    public static Vector3 Lerp(Vector3 start, Vector3 end, float time)
    {
        return start.Mul(1 - time).Add(end.Mul(time)); 
    }


    public Vector3 Add(Vector3 right)
    {
        return new Vector3(X + right.X, Y + right.Y, Z + right.Z);
    }
    public Vector3 Add(float scalar)
    {
        return new Vector3(X + scalar, Y + scalar, Z + scalar);
    }

    public Vector3 Sub(Vector3 right)
    {
        return new Vector3(X - right.X, Y - right.Y, Z - right.Z);
    }
    public Vector3 Sub(float scalar)
    {
        return new Vector3(X - scalar, Y - scalar, Z - scalar);
    }

    public Vector3 Mul(Vector3 right)
    {
        return new Vector3(X * right.X, Y * right.Y, Z * right.Z);
    }
    public Vector3 Mul(float scalar)
    {
        return new Vector3(X * scalar, Y * scalar, Z * scalar);
    }

    public Vector3 Div(Vector3 right)
    {
        return new Vector3(X / right.X, Y / right.Y, Z / right.Z);
    }
    public Vector3 Div(float scalar)
    {
        return new Vector3(X / scalar, Y / scalar, Z / scalar);
    }

    public static float Dot(Vector3 left, Vector3 right)
    {
        return left.X * right.X + left.Y * right.Y + left.Z * right.Z;
    }
    public static Vector3 Cross(Vector3 left, Vector3 right)
    {
        return new Vector3(
            left.Y * right.Z - left.Z * right.Y,
            left.Z * right.X - left.X * right.Z,
            left.X * right.Y - left.Y * right.X );
    }

    public static float Distance(Vector3 left, Vector3 right)
    {
        return right.Sub(left).Length();
    }
    public static float DistanceSqr(Vector3 left, Vector3 right)
    {
        return right.Sub(left).LengthSqr();
    }

    public Vector3 Swizzle(int a)
    {
        float[] components = new float[3];
        components[0] = X;
        components[1] = Y;
        components[2] = Z;
        return new Vector3(components[a]);
    }
    public Vector3 Swizzle(int a, int b, int c)
    {
        float[] components = new float[3];
        components[0] = X;
        components[1] = Y;
        components[2] = Z;
        return new Vector3(
            components[a], 
            components[b], 
            components[c]);
    }


    public static Vector3 FromNative(Vector3f nativeVector)
    {
        return new Vector3(nativeVector.x, nativeVector.y, nativeVector.z);
    }
    public void GetNative(Vector3f outVector)
    {
        outVector.set(X, Y, Z);
    }
    public Vector3f GetNative()
    {
        return new Vector3f(X, Y, Z);
    }


    public String toString()
    {
        return "X: " + X + ", Y: " + Y + ", Z: " + Z; 
    }
    public bool equals(Object object)
    {
        if(object instanceof Vector3)
        {
            Vector3 vector = (Vector3)object;
            return X == vector.X && Y == vector.Y && Z == vector.Z;
        }
        return false;
    }
}
/// </class>