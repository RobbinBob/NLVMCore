package scripts;

import com.nolimitscoaster.*;
import nlvm.math3d.*;
import nlvm.lang.Object;

import scripts.utilities.*;
import scripts.containers.*;

/// <class>
/// <desc>Type used for custom coaster bogies; Allows customisation of wheel rotation speeds based on the diameter,\nThis implementation uses the common separated pitch/yaw bogies found on gerst,mack,vekoma.</desc>
public class CoasterBogie extends Behaviour implements ISetableBogie
{
    private CoasterTrain m_Handler = null;
    private TrainHandlerManager m_HandlerManager = null;

    private Coaster m_Coaster;
    private Train m_Train;

    private String m_CoasterName = "";
    private int m_TrainIndex;
    private int m_BogieIndex;

    private SceneObjectElement m_RightYaw, m_LeftYaw;
    private SceneObjectElement m_RightPitch, m_LeftPitch;

    private static final int MODE_INVALID = -1;
    private static final int MODE_SPLIT_AXLE = 0;
    private int m_ChassisType = MODE_SPLIT_AXLE;


    private float m_WheelRunningRadius = 0.15f;
    private float m_WheelGuideRadius = 0.105f;
    private float m_WheelUpstopRadius = 0.105f;

    private int m_WheelTextureIndex = 0;

        // My new way of abstracting bullshit out even more
    private CoasterWheel[] m_WheelTable = new CoasterWheel[0];
    private SceneObjectElement[] m_Wheels = new SceneObjectElement[0];

    public bool Awake()
    {
        m_Coaster = m_SceneObject.getCoasterParameter("coaster");
        m_CoasterName = m_Coaster.getName();

        m_Train = m_Coaster.findNearestTrain(m_SceneObject.getTranslation(), 5.0f);
        if(m_Train == null) System.throwRuntimeException("Could not find train within 5 metres");
        m_TrainIndex = TrainUtil.GetTrainIndex(m_Train);
        m_BogieIndex = GetIntegerParameter("bogie_index");

        String handlerName = m_CoasterName + '_' + m_TrainIndex;

        m_HandlerManager = TrainHandlerManager.GetInstance();
        m_Handler = m_HandlerManager.GetHandler(handlerName);
        if(m_Handler == null)
        {
            m_Handler = new CoasterTrain(handlerName);
            m_HandlerManager.RegisterHandler(m_Handler);
            m_Handler.SetBogieModifier(m_HandlerManager.GetDefaultBogieModifier());
        }
        if(m_Handler.GetBogieModifier() == null) m_Handler.SetBogieModifier(m_HandlerManager.GetDefaultBogieModifier());
        m_Handler.RegisterBogie(this);



            // New JSON parser for bogies
        ResourcePath descriptorFile = GetResourcePathParameter("bogie_descriptor");
        String descriptorText = Tools.loadTextFileFromResource(descriptorFile);
        if(descriptorText.length() <= 0)
            InvalidFormatException.Throw("File is empty");

        Json head = Json.Parse(descriptorText);
            // TODO - Implement mode checking so we can have different chassis types
        if(!head.HasKey("mode"))
            Exception.Throw("Bogie descriptor file missing mode, must include mode 'split_axle'");

        m_ChassisType = head.Get("mode").GetString().equals("split_axle") ? MODE_SPLIT_AXLE : MODE_INVALID;
        if(m_ChassisType == MODE_INVALID)
            Exception.Throw("Invalid chassis mode detected, mode must be 'split_axle'");

        if(m_ChassisType == MODE_SPLIT_AXLE)
        {
            Json yaw = head.Get("yaw_elements");
            m_LeftYaw = m_SceneObject.getElementForName(yaw.Get("left").GetString());
            m_RightYaw = m_SceneObject.getElementForName(yaw.Get("right").GetString());

            Json pitch = head.Get("pitch_elements");
            m_LeftPitch = m_SceneObject.getElementForName(pitch.Get("left").GetString());
            m_RightPitch = m_SceneObject.getElementForName(pitch.Get("right").GetString());
        }

        if(head.HasKey("wheels"))
        {
            Json wheels = head.Get("wheels");

            if(wheels.HasKey("wheel_running_radius"))
                m_WheelRunningRadius = wheels.Get("wheel_running_radius").GetFloat();
            if(wheels.HasKey("wheel_guide_radius"))
                m_WheelGuideRadius = wheels.Get("wheel_guide_radius").GetFloat();
            if(wheels.HasKey("wheel_upstop_radius"))
                m_WheelUpstopRadius = wheels.Get("wheel_upstop_radius").GetFloat();

            if(wheels.HasKey("elements"))
            {
                Json wheelElements = wheels.Get("elements");
                m_Wheels = new SceneObjectElement[wheelElements.Count()];
                m_WheelTable = new CoasterWheel[wheelElements.Count()];
                IEnumerator enumerator = wheelElements.GetEnumerator();
                int index = 0;
                while(enumerator.MoveNext())
                {
                    Json wheel = (Json)enumerator.Get();

                    String wheelType = wheel.Get("type").GetString();
                    float radius = 0.0f;
                    if(wheelType.equals("running"))
                        radius = m_WheelRunningRadius;
                    else if(wheelType.equals("guide"))
                        radius = m_WheelGuideRadius;
                    else if(wheelType.equals("upstop"))
                        radius = m_WheelUpstopRadius;

                    String wheelDirection = wheel.Get("direction").GetString();
                    int direction = CoasterWheel.WHEEL_FWD;
                    if(wheelDirection.equals("fwd"))
                        direction = CoasterWheel.WHEEL_FWD;
                    else if(wheelDirection.equals("bwd"))
                        direction = CoasterWheel.WHEEL_BWD;
                    else
                        Exception.Throw("Invalid wheel direction specified, expeted 'fwd' | 'bwd'");
                    

                    String wheelAxis = wheel.Get("axis").GetString();
                    Vector3f axis = new Vector3f();
                    switch(wheelAxis.charAt(0))
                    {
                        case 'x':
                            axis.set(1, 0, 0);
                            break;
                        case 'y':
                            axis.set(0, 1, 0);
                            break;
                        case 'z':
                            axis.set(0, 0, 1);
                            break;
                    }

                    m_WheelTable[index] = new CoasterWheel(
                        wheel.Get("name").GetString(),
                        radius,
                        direction,
                        axis
                    );
                    m_Wheels[index] = m_SceneObject.getElementForName(m_WheelTable[index].Name);
                    if(m_Wheels[index] == null)
                        NullReferenceException.Throw("Could not find wheel object with name '" + m_WheelTable[index].Name + "'");

                    index++;
                }
            }
        }
        return true;
    }

        // ISetable
    public void SetMatrix(Matrix4x4f matrix)
    {
        m_SceneObject.setMatrix(matrix);
    }
    public void SetData(Object object) 
    {
    }

        // IGetable
    public Object GetData()
    {
        return m_SceneObject;
    }    

        // ISetableBogie
    public Coaster GetCoaster() { return m_Coaster; } 
    public Train GetTrain() { return m_Train; }
    public int GetTrainIndex() { return m_TrainIndex; }
    public int GetBogieIndex() { return m_BogieIndex; }

    public void SetBogiePitchYaw(Vector3f rotation)
    {
        m_RightYaw.setRotation(-rotation.x, 0, 0);
        m_LeftYaw.setRotation(-rotation.x, 0, 0);

        m_RightPitch.setRotation(0, -rotation.y, 0);
        m_LeftPitch.setRotation(0, -rotation.y, 0);
    }
    public void SetPositionRotation(Vector3f position, Vector3f rotation)
    {
        m_SceneObject.setTranslation(position);
        m_SceneObject.setRotation(rotation);
    }
    public void SetWheelRotation(float rotationFactor, int textureIndex)
    {
        Vector3f rot = new Vector3f();
        for(int i = 0; i < m_Wheels.length; ++i)
        {
            rot.set(m_WheelTable[i].Axis);
            rot.mul((rotationFactor / m_WheelTable[i].Radius) * m_WheelTable[i].Direction);

            m_Wheels[i].setRotation(rot);
            m_Wheels[i].setTextureAnimationIndex(m_WheelTextureIndex);
        }
    }
}
/// </class>