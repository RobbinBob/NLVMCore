package scripts;

import com.nolimitscoaster.*;
import nlvm.math3d.*;
import nlvm.util.*;
import scripts.containers.*;
import scripts.utilities.*;

/// <class ignore_api="true">
/// <desc>.</desc>
public final class DebugGizmoHandler extends UpdateableObject
{
    private static final String GIZMO_SYMBOL_NAME = "DebugSymbols";
    private static final String GIZMO_SYMBOL_LINE = "Line";
    private static final String GIZMO_SYMBOL_SPHERE = "Sphere";

    private static final List m_SpherePool = new List(1000);
    private static final List m_LinePool = new List(1000);

    private static final List m_ActiveGizmos = new List(25);
    private static final List m_RemoveGizmos = new List();
    private bool m_IsActive = false;

    private static bool m_IsInstanced = false;

    public DebugGizmoHandler()
    {
        if(m_IsInstanced)
            Exception.Throw("Attempting to instantiate DebugGizmoHandler more than once, this is not allowed");

        SceneObject symbols = NoLimits.getSimulator().getSceneObject(GIZMO_SYMBOL_NAME);
        symbols.setMatrix(new Matrix4x4f());

        SceneObjectElement[] lineElements = GetElementsWithName(symbols, GIZMO_SYMBOL_LINE);
        for(int i = 0; i < lineElements.length; ++i)
        {
            DebugGizmo gizmo = new DebugGizmo(lineElements[i], DebugGizmo.GIZMO_LINE);
            m_LinePool.Insert(gizmo);
            lineElements[i].setVisible(false);
        }
        Debug.Print("Found " + lineElements.length + " line elements");

        SceneObjectElement[] sphereElements = GetElementsWithName(symbols, GIZMO_SYMBOL_SPHERE);
        for(int i = 0; i < sphereElements.length; ++i)
        {
            DebugGizmo gizmo = new DebugGizmo(sphereElements[i], DebugGizmo.GIZMO_SPHERE);
            m_SpherePool.Insert(gizmo);
            sphereElements[i].setVisible(false);
        }
        Debug.Print("Found " + sphereElements.length + " sphere elements");

        m_IsInstanced = true;
    }


    public void DrawLine(Matrix4x4f matrix, float timespan, Vector4f color)
    {
        if(m_SpherePool.Count() < 1)
            return;
            
        DebugGizmo gizmo = (DebugGizmo)m_LinePool.PopBack();
        gizmo.SetTimespan(timespan);
        SceneObjectElement element = gizmo.GetElement();

        element.setMatrix(matrix);
        element.setEntityColor(0, color);
        element.setVisible(true);
        m_ActiveGizmos.Insert(gizmo);

            // Re-enables the updates if it was previously off
        if(!m_IsActive)
            Register();
    }

    public void DrawSphere(Matrix4x4f matrix, float timespan, Vector4f color)
    {
        if(m_SpherePool.Count() < 1)
            return;

        DebugGizmo gizmo = (DebugGizmo)m_SpherePool.PopBack();
        gizmo.SetTimespan(timespan);
        SceneObjectElement element = gizmo.GetElement();

        element.setMatrix(matrix);
        element.setEntityColor(0, color);
        element.setVisible(true);
        m_ActiveGizmos.Insert(gizmo);

        if(!m_IsActive)
            Register();
    }







    private SceneObjectElement[] GetElementsWithName(SceneObject sceneObject, String name)
    {
        Vector elements = new Vector();
        for(int i = 0; i < sceneObject.getElementCount(); ++i)
            if(StringUtil.Contains(sceneObject.getElementAt(i).getName(), name))
                elements.addElement(sceneObject.getElementAt(i));

        SceneObjectElement[] arr = new SceneObjectElement[elements.size()];
        for(int i = 0; i < arr.length; ++i)
            arr[i] = (SceneObjectElement)elements.elementAt(i);

        return arr;
    }
    private void Register()
    {
        SetShouldUpdate(true);
        m_IsActive = true;
    }

    public void Update(float tick)
    {
            // Stop receiving updates if we dont have gizmos to handle
        if(m_ActiveGizmos.Count() <= 0)
        {
            SetShouldUpdate(false);
            m_IsActive = false;
        }

        m_RemoveGizmos.Clear();
        IEnumerator enumerator = m_ActiveGizmos.GetEnumerator();
        while(enumerator.MoveNext())
        {
            DebugGizmo gizmo = (DebugGizmo)enumerator.Get();
            gizmo.SetTimespan(gizmo.GetTimespan() - tick);

                // Needs to be removed
            if(gizmo.GetTimespan() <= 0.0f)
            {
                gizmo.GetElement().setVisible(false);
                m_RemoveGizmos.Insert(gizmo);
            }
        }

        enumerator = m_RemoveGizmos.GetEnumerator();
        while(enumerator.MoveNext())
        {
            DebugGizmo gizmo = (DebugGizmo)enumerator.Get();
            m_ActiveGizmos.Remove(gizmo);

            switch(gizmo.GetType())
            {
                case DebugGizmo.GIZMO_LINE:
                    m_LinePool.Insert(gizmo);
                    break;
                case DebugGizmo.GIZMO_SPHERE:
                    m_SpherePool.Insert(gizmo);
                    break;
            }
        }
    }
    public void LateUpdate(float tick) { }
}
/// </class>