package scripts.utilities;

import nlvm.math3d.*;
import com.nolimitscoaster.Tools;

public class MatrixUtil
{
    public static Matrix4x4f[] GetOffsetMatrices(Matrix4x4f[] matrices, Matrix4x4f offsetFrom)
    {
        Matrix4x4f inverted = new Matrix4x4f(offsetFrom);
        inverted.invert();

        Matrix4x4f duplicate = null;
        Matrix4x4f[] offsets = new Matrix4x4f[matrices.length];
        for(int i = 0; i < matrices.length; i++)
        {
                // As to not edit the wrong data
            duplicate = matrices[i].dup();
            duplicate.multLeft(inverted);
            offsets[i] = duplicate;
        }
        return offsets;
    }
    public static void GetOffsetMatrixAndStore(Matrix4x4f[] matrices, Matrix4x4f offsetFrom)
    {
        Matrix4x4f inverted = new Matrix4x4f(offsetFrom);
        inverted.invert();
        
        for(int i = 0; i < matrices.length; i++)
        {
            matrices[i].multLeft(inverted);
        }
    }

    public static Matrix4x4f Lerp(float t, Matrix4x4f in, Matrix4x4f out)
    {
        float[] inComp = in.elems();
        float[] outComp = out.elems();

        Matrix4x4f matrix = new Matrix4x4f();
        float[] comp = matrix.elems();

        for(int i = 0; i < 16; ++i)
            comp[i] = Tools.lerp(t, inComp[i], outComp[i]);
        
        return matrix;
    }

    // Credit NoLimitsFramework
    public static Matrix4x4f initMatrix(float a1, float a2, float a3, float a4,
            float b1, float b2, float b3, float b4,
            float c1, float c2, float c3, float c4,
            float d1, float d2, float d3, float d4) {
        Matrix4x4f m = new Matrix4x4f();
        m.setElemAt(0, 0, a1);
        m.setElemAt(1, 0, a2);
        m.setElemAt(2, 0, a3);
        m.setElemAt(3, 0, a4);

        m.setElemAt(0, 1, b1);
        m.setElemAt(1, 1, b2);
        m.setElemAt(2, 1, b3);
        m.setElemAt(3, 1, b4);

        m.setElemAt(0, 2, c1);
        m.setElemAt(1, 2, c2);
        m.setElemAt(2, 2, c3);
        m.setElemAt(3, 2, c4);

        m.setElemAt(0, 3, d1);
        m.setElemAt(1, 3, d2);
        m.setElemAt(2, 3, d3);
        m.setElemAt(3, 3, d4);

        return m;
    }
    public static Matrix4x4f LookTo(Vector3f eye, Vector3f target, Vector3f up) 
    {
        Vector3f eyeTargetDiff = eye.dup();
        eyeTargetDiff.sub(target);
        eyeTargetDiff.normalize();
                
        Vector3f zaxis = eyeTargetDiff;

        if((float)Math.abs(zaxis.dot(up)) >= 0.999f)
            up = new Vector3f(0, 0, 1);
        
        Vector3f result = up.dup();
        up.cross(up, zaxis);
        Vector3f crossUpZAxis = result.dup();
        crossUpZAxis.normalize();
        
        Vector3f xaxis = crossUpZAxis;

        result = zaxis.dup();
        result.cross(zaxis, xaxis);
        Vector3f yaxis = result.dup();
        
        Matrix4x4f orientation = initMatrix(
            xaxis.x, yaxis.x, zaxis.x, eye.x,
            xaxis.y, yaxis.y, zaxis.y, eye.y,
            xaxis.z, yaxis.z, zaxis.z, eye.z,
            0, 0, 0, 1
        );
        
        return orientation;
    }
}