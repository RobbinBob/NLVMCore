package scripts;

import scripts.containers.*;

public abstract class AudioEmitter extends Behaviour implements IReferenceable
{
    protected List m_AudioClips = new List();
    protected SpatialSound m_ActiveSound = null;
    private AudioController m_AudioGroup = null;

    protected float m_FallOff = 1;
    protected float m_Distance = 1;

    public int GetOrder() { return -30; }
    public bool Awake()
    {
        String groupId = GetStringParameter("group_name");
        if(groupId.length() == 0)
        {
            Debug.Warn("Audio Emitter | No Group Id specified");
            return false;
        }
        SetName(groupId);

        return true;
    }
    public void Start()
    {
        m_FallOff = GetFloatParameter("audio_falloff");
        m_Distance = GetFloatParameter("audio_distance");
        Registry.GetInstance().Register(this);
    }

    public final SpatialSound GetCurrentSound()
    {
        return m_ActiveSound;
    }
    public SpatialSound SetCurrentSound(String name)
    {
        //Debug.Print("Setting sound " + name);
            // Try find the sound in the current emitter cache
        m_ActiveSound = null;
        IEnumerator enumerator = m_AudioClips.GetEnumerator();
        while(enumerator.MoveNext())
        {
            if(((SpatialSound)enumerator.Get()).GetName().equals(name))
            {
                m_ActiveSound = (SpatialSound)enumerator.Get();
                break;
            }
        }

            // Not in cache, we need to load it in
        if(m_ActiveSound == null)
        {
            Debug.Print("Audio Emitter | Unable to find sound with name " + name + " in cache");
            IReferenceable reference = Registry.GetInstance().GetReferenceFromName("scripts.SpatialSound", name);
            if(reference == null)
                Exception.Throw("Audio Emitter | Unable to load SpatialSound file from registry with name '" + name + "'");

            SpatialSound sound = (SpatialSound)((SpatialSound)reference).Instantiate();
            m_AudioClips.Insert(sound);
            m_ActiveSound = sound;
        }

        //m_ActiveSound.SetPosition(GetPosition());
        m_ActiveSound.SetConstantDistance(m_Distance);
        m_ActiveSound.SetFalloffFactor(m_FallOff);
        //m_ActiveSound.SetPosition(GetPosition());
        //m_ActiveSound.SetShouldUseDoppler(false);

        return m_ActiveSound;
    }

    public List GetAllSounds()
    {
        return m_AudioClips;
    }

    public AudioController GetAudioController()
    {
        if(m_AudioGroup == null)
            m_AudioGroup = (AudioController)Registry.GetInstance().GetReferenceFromName("scripts.AudioController", GetStringParameter("group_name"));
        return m_AudioGroup;
    }



        // IReferenceable
    public String GetType()
    {
        return "scripts.AudioEmitter";
    }
    public final String GetName()
    {
        return m_Name;
    }
    public final void SetName(String name)
    {
        m_Name = name;
    }
}