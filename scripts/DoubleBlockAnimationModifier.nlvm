package scripts;

import scripts.modifiers.*;
import scripts.utilities.*;

import com.nolimitscoaster.*;
import nlvm.math3d.*;
import nlvm.lang.*;

public final class DoubleBlockAnimationModifier extends AnimationModifier implements ICarModifier, IBogieModifier
{
    private Block m_NextBlock = null;

    private Block m_EnterBlock = null;
    private Section m_EnterSection = null;
    private Block m_ExitBlock = null;
    private Section m_ExitSection = null;

    private static final int STATE_EMPTY = 0;
    private static final int STATE_APPROACHING = 1;
    private static final int STATE_PROCESSING = 2;
    private static final int STATE_LEAVING = 3;

    private static final int ANIMATION_STATE_IDLE = 0;
    private static final int ANIMATION_STATE_START = 1;
    private static final int ANIMATION_STATE_RUNNING_FWD = 2;
    private static final int ANIMATION_STATE_WAIT_FOR_SYNC = 3;
    private static final int ANIMATION_STATE_RUNNING_BWD = 4;
    private static final int ANIMATION_STATE_END = 500;
    private int m_AnimationState = ANIMATION_STATE_IDLE;
    
    private static final int DIRECTION_FWD_FWD = 0;
    private static final int DIRECTION_BWD_BWD = 1;
    private int m_Direction = DIRECTION_FWD_FWD;

    private bool m_UseLaunchOnExit = false;

    private InterpolateTrainMatrixModifier m_InterpolateModifier = null;
    private BlockUtil m_BlockHandler = null;

    public bool Start()
    {
            // Call super to setup the animation stuff for us
        super.Start();

        m_EnterBlock = GetBlockParameter("enter_block");
        m_EnterSection = m_EnterBlock.getSection();
        m_ExitBlock = GetBlockParameter("exit_block");
        m_ExitSection = m_ExitBlock.getSection();

        m_NextBlock = GetBlockParameter("next_block");
        m_Direction = GetIntegerParameter("train_direction");

        m_UseLaunchOnExit = GetBoolParameter("use_launch_on_exit");
        return true;
    }

    public void Update(float tick)
    {
        switch(m_AnimationState)
        {
            case ANIMATION_STATE_IDLE:
            {
                if(m_EnterBlock.getState() == STATE_APPROACHING)
                {
                    m_BlockHandler = BlockUtil.WaitForTrainAndPark(m_EnterBlock);
                    m_AnimationState = ANIMATION_STATE_START;
                }
                break;
            }

            case ANIMATION_STATE_START:
            {
                if(m_EnterSection.isTrainOnSection()) 
                    m_EnterBlock.setState(STATE_PROCESSING);
                
                    // Wait for train to park
                if(!m_BlockHandler.IsCommandComplete()) 
                    break;

                Train train = m_EnterSection.getTrainOnSection();
                m_ActiveHandler = GetOccupyingTrainHandler(train);
                if(m_ActiveHandler == null) 
                    NullReferenceException.Throw("Could not find TrainHandle for the given train, please make sure it is registered with a handler");

                    // Store the previous modifier so we can re-apply it after this modifier is done
                StoreActiveModifiers();

                    // Helper function that does a lot of calculations to make the train attach correctly
                SetupTrainWrapper(train);

                    // Set the active modifier to be this instance so we can control how the cars/bogies move
                SetAsActiveModifiers();

                m_AnimationState = ANIMATION_STATE_RUNNING_FWD;
                break;
            }

            case ANIMATION_STATE_RUNNING_FWD:
            {
                    // Try play fwd animation and wait for it to complete
                if(!IsPlayingFwdAnimation())
                {
                    TryPlayFwdAnimation();
                    BlockUtil.MoveTrainOffBlockFwd(m_EnterBlock);
                    m_BlockHandler = BlockUtil.WaitForTrainAndPark(m_ExitBlock);
                }

                m_AnimationState = ANIMATION_STATE_WAIT_FOR_SYNC;
                break;
            }
            case ANIMATION_STATE_WAIT_FOR_SYNC:
                {
                        // Wait for the animation to complete and the train to be in position
                    if(!m_BlockHandler.IsCommandComplete() || !IsFwdAnimationComplete()) 
                        return;

                    m_InterpolateModifier = new InterpolateTrainMatrixModifier(m_ActiveHandler, m_TrainWrapper, 0.5f);
                    m_InterpolateModifier.SetStartMatrices(m_ActiveHandler.GetCarMatrices(), m_ActiveHandler.GetBogieMatrices());
                        // Give over our control to the interpolator to move the cars/bogies into position
                    SetActiveModifiers(m_InterpolateModifier, m_InterpolateModifier);
                    m_InterpolateModifier.Start();

                    m_AnimationState = ANIMATION_STATE_END;
                    break;
                }
            case ANIMATION_STATE_END:
            {
                if(m_InterpolateModifier != null && m_InterpolateModifier.IsComplete())
                {
                        // Applies the old modifiers to the train, giving up our control ready for it to leave
                    ApplyStoredModifiers();
                    m_InterpolateModifier = null;
                }

                Train train = m_TrainWrapper.GetTrain();
                if(m_NextBlock.getState() == STATE_EMPTY)
                {
                    if(train.getSpeed() != 0 || !m_ExitSection.isTrainOnSection()) break;
                    m_ExitSection.setBrakesOff();
                    m_NextBlock.setState(STATE_APPROACHING);
                    m_ExitBlock.setState(STATE_LEAVING);

                    switch(m_Direction)
                    {
                        case DIRECTION_FWD_FWD:
                            if(!m_UseLaunchOnExit)
                                m_ExitSection.setTransportsStandardFwdOn();
                            else
                                m_ExitSection.setTransportsLaunchFwdOn();
                            break;
                        case DIRECTION_BWD_BWD:
                            if(!m_UseLaunchOnExit)
                                m_ExitSection.setTransportsStandardBwdOn();
                            else
                                m_ExitSection.setTransportsLaunchBwdOn();
                            break;
                    }
                }
                else if(m_ExitBlock.getState() == STATE_LEAVING)
                {
                    if(!m_ExitSection.isTrainOnSection())
                    {
                        m_ExitBlock.setState(STATE_EMPTY);
                        m_ExitSection.setBrakesOn();
                        m_ExitSection.setTransportsOff();

                        m_AnimationState = ANIMATION_STATE_RUNNING_BWD;
                    }
                }
                break;
            }

            case ANIMATION_STATE_RUNNING_BWD:
            {
                if(!IsPlayingBwdAnimation())
                    TryPlayBwdAnimation();
                if(!IsBwdAnimationComplete()) break;

                m_EnterBlock.setState(STATE_EMPTY);
                m_AnimationState = ANIMATION_STATE_IDLE;
                m_Animation.SetFrame(0);
                break;
            }
        }
    }


    public void Run(CarModifierData data)
    {
        Train train = data.SetableCar.GetTrain();
        int index = m_TrainWrapper.GetCarIndex(data.SetableCar);
        if(index == -1) System.throwRuntimeException("Fatal error fetching ISetableCar index");

        Matrix4x4f matrix = m_TrainWrapper.GetAttachmentMatrix();
        matrix.multRight(m_TrainWrapper.GetCarOffset(index));
        data.SetableCar.SetMatrix(matrix);
    }
    public void Run(BogieModifierData data)
    {
        Train train = data.SetableBogie.GetTrain();
        int index = m_TrainWrapper.GetBogieIndex(data.SetableBogie);
        if(index == -1) System.throwRuntimeException("Fatal erroe fetching ISetableBogie index");

        Matrix4x4f matrix = m_TrainWrapper.GetAttachmentMatrix();
        matrix.multRight(m_TrainWrapper.GetBogieOffset(index));
        data.SetableBogie.SetMatrix(matrix);
    }
}